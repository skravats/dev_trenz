
hw.elf:     file format elf32-littlenios2
hw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008184

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002eb0 memsz 0x00002eb0 flags r-x
    LOAD off    0x00003ed0 vaddr 0x0000aed0 paddr 0x0000b1e8 align 2**12
         filesz 0x00000318 memsz 0x00000318 flags rw-
    LOAD off    0x00004500 vaddr 0x0000b500 paddr 0x0000b500 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002ccc  00008184  00008184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  0000ae50  0000ae50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000318  0000aed0  0000b1e8  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  0000b500  0000b500  00004500  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b618  0000b618  000041e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d8  00000000  00000000  00004210  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a286  00000000  00000000  000047e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003134  00000000  00000000  0000ea6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003511  00000000  00000000  00011ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cc8  00000000  00000000  000150b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002670  00000000  00000000  00015d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000458e  00000000  00000000  000183ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001c97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000590  00000000  00000000  0001c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ee96  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001ee99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001eea5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001eea6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001eea7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001eeb2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001eebd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0001eec8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0001eed1  2**0
                  CONTENTS, READONLY
 26 .jdi          000066f4  00000000  00000000  0001ef18  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00328b6b  00000000  00000000  0002560c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008184 l    d  .text	00000000 .text
0000ae50 l    d  .rodata	00000000 .rodata
0000aed0 l    d  .rwdata	00000000 .rwdata
0000b500 l    d  .bss	00000000 .bss
0000b618 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hw_bsp//obj/HAL/src/crt0.o
000081bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000085d4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aed0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000afdc l     O .rwdata	00000038 hdmi_i2c
0000afb0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00009134 l     F .text	00000058 alt_avalon_i2c_irq
0000918c l     F .text	000000dc optional_irq_callback
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a5e4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a7c8 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b514 g     O .bss	00000004 alt_instruction_exception_handler
00008f88 g     F .text	00000050 alt_main
00008524 g     F .text	00000080 _puts_r
0000b518 g     O .bss	00000100 alt_irq
0000b1e8 g       *ABS*	00000000 __flash_rwdata_start
000084d8 g     F .text	0000004c printf
000095a0 g     F .text	0000008c alt_avalon_i2c_rx_read
0000a348 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00009480 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
00009a74 g     F .text	000001c4 alt_avalon_i2c_master_transmit_using_interrupts
0000aaac g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b500 g     O .bss	00000004 errno
0000b508 g     O .bss	00000004 alt_argv
000131bc g       *ABS*	00000000 _gp
0000a35c g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
00009558 g     F .text	00000010 alt_avalon_i2c_is_busy
0000b014 g     O .rwdata	00000180 alt_fd_list
00009348 g     F .text	00000058 alt_avalon_i2c_master_config_set
0000a658 g     F .text	00000078 alt_find_dev
0000a854 g     F .text	00000074 alt_io_redirect
00009908 g     F .text	0000016c alt_avalon_i2c_master_transmit
000085a4 g     F .text	00000014 puts
0000abe8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000a400 g     F .text	00000074 altera_avalon_jtag_uart_read
0000849c g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d90 g     F .text	00000064 .hidden __udivsi3
0000929c g     F .text	0000004c alt_avalon_i2c_enable
0000a30c g     F .text	00000020 alt_avalon_i2c_int_disable
0000b1cc g     O .rwdata	00000004 alt_max_fd
00009d18 g     F .text	000001d0 alt_avalon_i2c_master_receive
0000a32c g     F .text	0000001c alt_avalon_i2c_int_enable
0000b1bc g     O .rwdata	00000004 _global_impure_ptr
0000b618 g       *ABS*	00000000 __bss_end
0000a760 g     F .text	00000068 alt_iic_isr_register
0000a2d8 g     F .text	00000018 alt_avalon_i2c_int_status_get
0000a748 g     F .text	00000018 alt_ic_irq_enabled
00009284 g     F .text	00000010 alt_avalon_i2c_register_callback
0000b510 g     O .bss	00000004 alt_irq_active
000093a0 g     F .text	000000e0 alt_avalon_i2c_init
000080fc g     F .exceptions	00000064 alt_irq_handler
0000b194 g     O .rwdata	00000028 alt_dev_null
0000a5e0 g     F .text	00000004 alt_dcache_flush_all
0000b1e8 g       *ABS*	00000000 __ram_rwdata_end
0000b1d0 g     O .rwdata	00000008 alt_dev_list
00008fd8 g     F .text	00000110 write
000097bc g     F .text	0000001c alt_avalon_i2c_check_arblost
0000a300 g     F .text	0000000c alt_avalon_i2c_int_clear
0000aed0 g       *ABS*	00000000 __ram_rodata_end
0000b1c4 g     O .rwdata	00000008 alt_avalon_i2c_list
00008df4 g     F .text	00000058 .hidden __umodsi3
0000b618 g       *ABS*	00000000 end
00008160 g     F .exceptions	00000024 alt_instruction_exception_entry
00009294 g     F .text	00000008 alt_avalon_i2c_open
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009c38 g     F .text	000000e0 alt_avalon_i2c_master_tx
0000a474 g     F .text	00000034 altera_avalon_jtag_uart_write
00008640 g     F .text	0000052c ___vfprintf_internal_r
0000acac g     F .text	00000190 __call_exitprocs
00009268 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00008184 g     F .text	0000003c _start
00009ee8 g     F .text	000001c8 alt_avalon_i2c_master_receive_using_interrupts
0000a374 g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
00009108 g     F .text	0000002c alt_sys_init
0000a19c g     F .text	0000013c alt_avalon_i2c_master_tx_rx
00008e4c g     F .text	00000028 .hidden __mulsi3
0000aed0 g       *ABS*	00000000 __ram_rwdata_start
0000ae50 g       *ABS*	00000000 __ram_rodata_start
0000a3e0 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0000ab60 g     F .text	00000088 alt_get_fd
0000a4a8 g     F .text	00000078 alt_busy_sleep
0000ac7c g     F .text	00000030 memcmp
00009568 g     F .text	00000038 alt_avalon_i2c_rx_read_available
0000b618 g       *ABS*	00000000 __alt_stack_base
0000aab4 g     F .text	000000ac alt_find_file
0000a5ec g     F .text	0000006c alt_dev_llist_insert
000097d8 g     F .text	00000130 alt_avalon_i2c_interrupt_transaction_status
000097a0 g     F .text	0000001c alt_avalon_i2c_check_nack
00008b88 g     F .text	000000b8 __sfvwrite_small_dev
0000b500 g       *ABS*	00000000 __bss_start
000081c0 g     F .text	000002dc main
00009798 g     F .text	00000008 alt_avalon_i2c_master_target_set
0000b504 g     O .bss	00000004 alt_envp
0000a3f0 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000a2f0 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
0000b1e0 g     O .rwdata	00000004 alt_errno
00008c98 g     F .text	00000084 .hidden __divsi3
0000ae50 g       *ABS*	00000000 __flash_rodata_start
000090e8 g     F .text	00000020 alt_irq_init
0000aa50 g     F .text	0000005c alt_release_fd
00008c40 g     F .text	00000058 _write_r
0000b1c0 g     O .rwdata	00000004 _impure_ptr
0000b50c g     O .bss	00000004 alt_argc
0000978c g     F .text	0000000c alt_avalon_i2c_master_target_get
0000970c g     F .text	00000080 alt_avalon_i2c_send_address
00008020 g       .exceptions	00000000 alt_irq_entry
0000b1d8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a3b4 g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0000a6d4 g     F .text	00000004 alt_ic_isr_register
000092e8 g     F .text	0000001c alt_avalon_i2c_disable
0000b1e8 g       *ABS*	00000000 _edata
0000b618 g       *ABS*	00000000 _end
00008184 g       *ABS*	00000000 __ram_exceptions_end
00009304 g     F .text	00000044 alt_avalon_i2c_master_config_get
0000a710 g     F .text	00000038 alt_ic_irq_disable
0000ac5c g     F .text	00000020 exit
00008d1c g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
000094cc g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
0000962c g     F .text	000000e0 alt_avalon_i2c_cmd_write
0000ae3c g     F .text	00000014 _exit
000085b8 g     F .text	0000001c strlen
0000a8c8 g     F .text	00000188 open
0000a6d0 g     F .text	00000004 alt_icache_flush_all
0000b1e4 g     O .rwdata	00000004 alt_priority_mask
0000a6d8 g     F .text	00000038 alt_ic_irq_enable
00008b6c g     F .text	0000001c __vfprintf_internal
0000a520 g     F .text	000000c0 close
0000a39c g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00008e74 g     F .text	00000114 alt_load
0000a0b0 g     F .text	000000ec alt_avalon_i2c_master_rx



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606114 	ori	at,at,33156
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081600 	call	8160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	000b313a 	rdctl	r5,ipending
    810c:	04000074 	movhi	r16,1
    8110:	842d4604 	addi	r16,r16,-19176
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
    8118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	1000051e 	bne	r2,zero,8134 <alt_irq_handler+0x38>
    8120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
    812c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8130:	203ffc26 	beq	r4,zero,8124 <_gp+0xffff4f68>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8134:	180690fa 	slli	r3,r3,3
    8138:	80c7883a 	add	r3,r16,r3
    813c:	18800017 	ldw	r2,0(r3)
    8140:	19000117 	ldw	r4,4(r3)
    8144:	103ee83a 	callr	r2
    8148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    814c:	283ff11e 	bne	r5,zero,8114 <_gp+0xffff4f58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8150:	dfc00117 	ldw	ra,4(sp)
    8154:	dc000017 	ldw	r16,0(sp)
    8158:	dec00204 	addi	sp,sp,8
    815c:	f800283a 	ret

00008160 <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    8160:	d0a0d617 	ldw	r2,-31912(gp)
    8164:	10000426 	beq	r2,zero,8178 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8168:	200b883a 	mov	r5,r4
    816c:	000d883a 	mov	r6,zero
    8170:	013fffc4 	movi	r4,-1
    8174:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8178:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    817c:	0005883a 	mov	r2,zero
    8180:	f800283a 	ret

Disassembly of section .text:

00008184 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8184:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8188:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    818c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8190:	d68c6f14 	ori	gp,gp,12732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8194:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8198:	10ad4014 	ori	r2,r2,46336

    movhi r3, %hi(__bss_end)
    819c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81a0:	18ed8614 	ori	r3,r3,46616

    beq r2, r3, 1f
    81a4:	10c00326 	beq	r2,r3,81b4 <_start+0x30>

0:
    stw zero, (r2)
    81a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81b0:	10fffd36 	bltu	r2,r3,81a8 <_gp+0xffff4fec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81b4:	0008e740 	call	8e74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81b8:	0008f880 	call	8f88 <alt_main>

000081bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81bc:	003fff06 	br	81bc <_gp+0xffff5000>

000081c0 <main>:
	alt_u8 rxbuffer[0x200];
	int i;
	ALT_AVALON_I2C_STATUS_CODE status;

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/hdmi_i2c");
    81c0:	01000074 	movhi	r4,1
#include <stdio.h>
#include "system.h"
#include "altera_avalon_i2c.h"

int main()
{
    81c4:	defef904 	addi	sp,sp,-1052
	alt_u8 rxbuffer[0x200];
	int i;
	ALT_AVALON_I2C_STATUS_CODE status;

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/hdmi_i2c");
    81c8:	212b9404 	addi	r4,r4,-20912
#include <stdio.h>
#include "system.h"
#include "altera_avalon_i2c.h"

int main()
{
    81cc:	dfc10615 	stw	ra,1048(sp)
    81d0:	dcc10515 	stw	r19,1044(sp)
    81d4:	dc810415 	stw	r18,1040(sp)
    81d8:	dc410315 	stw	r17,1036(sp)
    81dc:	dc010215 	stw	r16,1032(sp)
	alt_u8 rxbuffer[0x200];
	int i;
	ALT_AVALON_I2C_STATUS_CODE status;

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/hdmi_i2c");
    81e0:	00092940 	call	9294 <alt_avalon_i2c_open>
	if (NULL==i2c_dev)
    81e4:	1000a826 	beq	r2,zero,8488 <main+0x2c8>
		return 1;
	}

	//set the address of the i2c slave device

	alt_avalon_i2c_master_target_set(i2c_dev,0x39);
    81e8:	1009883a 	mov	r4,r2
    81ec:	01400e44 	movi	r5,57
    81f0:	1021883a 	mov	r16,r2
    81f4:	00097980 	call	9798 <alt_avalon_i2c_master_target_set>


	txbuffer[0]=0x41; txbuffer[1]=0x10;
    81f8:	00801044 	movi	r2,65
    81fc:	d8808205 	stb	r2,520(sp)
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8200:	000f883a 	mov	r7,zero
	//set the address of the i2c slave device

	alt_avalon_i2c_master_target_set(i2c_dev,0x39);


	txbuffer[0]=0x41; txbuffer[1]=0x10;
    8204:	00800404 	movi	r2,16
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8208:	01800084 	movi	r6,2
    820c:	d9408204 	addi	r5,sp,520
    8210:	8009883a 	mov	r4,r16
	//set the address of the i2c slave device

	alt_avalon_i2c_master_target_set(i2c_dev,0x39);


	txbuffer[0]=0x41; txbuffer[1]=0x10;
    8214:	d8808245 	stb	r2,521(sp)
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8218:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	if (status!=ALT_AVALON_I2C_SUCCESS)
    821c:	1000961e 	bne	r2,zero,8478 <main+0x2b8>
		printf("write transaction failed\n");
	
	txbuffer[0]=0x98; txbuffer[1]=0x03;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8220:	04400084 	movi	r17,2
	txbuffer[0]=0x41; txbuffer[1]=0x10;
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	if (status!=ALT_AVALON_I2C_SUCCESS)
		printf("write transaction failed\n");
	
	txbuffer[0]=0x98; txbuffer[1]=0x03;
    8224:	00bfe604 	movi	r2,-104
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8228:	880d883a 	mov	r6,r17
    822c:	8009883a 	mov	r4,r16
    8230:	000f883a 	mov	r7,zero
    8234:	d9408204 	addi	r5,sp,520
	txbuffer[0]=0x41; txbuffer[1]=0x10;
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	if (status!=ALT_AVALON_I2C_SUCCESS)
		printf("write transaction failed\n");
	
	txbuffer[0]=0x98; txbuffer[1]=0x03;
    8238:	d8808205 	stb	r2,520(sp)
    823c:	008000c4 	movi	r2,3
    8240:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8244:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0x9A; txbuffer[1]=0xE0;
    8248:	04bff804 	movi	r18,-32
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    824c:	880d883a 	mov	r6,r17
    8250:	8009883a 	mov	r4,r16
    8254:	000f883a 	mov	r7,zero
    8258:	d9408204 	addi	r5,sp,520
		printf("write transaction failed\n");
	
	txbuffer[0]=0x98; txbuffer[1]=0x03;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x9A; txbuffer[1]=0xE0;
    825c:	00bfe684 	movi	r2,-102
    8260:	dc808245 	stb	r18,521(sp)
    8264:	d8808205 	stb	r2,520(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8268:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0x9C; txbuffer[1]=0x30;
    826c:	00bfe704 	movi	r2,-100
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8270:	880d883a 	mov	r6,r17
    8274:	8009883a 	mov	r4,r16
    8278:	000f883a 	mov	r7,zero
    827c:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x9A; txbuffer[1]=0xE0;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
	
	txbuffer[0]=0x9C; txbuffer[1]=0x30;
    8280:	d8808205 	stb	r2,520(sp)
    8284:	00800c04 	movi	r2,48
    8288:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    828c:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0x9D; txbuffer[1]=0x01;
    8290:	00bfe744 	movi	r2,-99
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8294:	880d883a 	mov	r6,r17
    8298:	8009883a 	mov	r4,r16
    829c:	000f883a 	mov	r7,zero
    82a0:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
	
	txbuffer[0]=0x9C; txbuffer[1]=0x30;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x9D; txbuffer[1]=0x01;
    82a4:	d8808205 	stb	r2,520(sp)
    82a8:	00800044 	movi	r2,1
    82ac:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    82b0:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0xA2; txbuffer[1]=0xA4;
    82b4:	04ffe904 	movi	r19,-92
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82b8:	880d883a 	mov	r6,r17
    82bc:	8009883a 	mov	r4,r16
    82c0:	000f883a 	mov	r7,zero
    82c4:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x9D; txbuffer[1]=0x01;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0xA2; txbuffer[1]=0xA4;
    82c8:	00bfe884 	movi	r2,-94
    82cc:	dcc08245 	stb	r19,521(sp)
    82d0:	d8808205 	stb	r2,520(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82d4:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0xA3; txbuffer[1]=0xA4;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82d8:	880d883a 	mov	r6,r17
    82dc:	8009883a 	mov	r4,r16
    82e0:	000f883a 	mov	r7,zero
    82e4:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0xA2; txbuffer[1]=0xA4;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0xA3; txbuffer[1]=0xA4;
    82e8:	00bfe8c4 	movi	r2,-93
    82ec:	dcc08245 	stb	r19,521(sp)
    82f0:	d8808205 	stb	r2,520(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82f4:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0xE0; txbuffer[1]=0xD0;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82f8:	880d883a 	mov	r6,r17
    82fc:	8009883a 	mov	r4,r16
    8300:	000f883a 	mov	r7,zero
    8304:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0xA3; txbuffer[1]=0xA4;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0xE0; txbuffer[1]=0xD0;
    8308:	00bff404 	movi	r2,-48
    830c:	dc808205 	stb	r18,520(sp)
    8310:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8314:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0xF9; txbuffer[1]=0x00; 
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8318:	880d883a 	mov	r6,r17
    831c:	8009883a 	mov	r4,r16
    8320:	000f883a 	mov	r7,zero
    8324:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0xE0; txbuffer[1]=0xD0;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0xF9; txbuffer[1]=0x00; 
    8328:	00bffe44 	movi	r2,-7
    832c:	d8808205 	stb	r2,520(sp)
    8330:	d8008245 	stb	zero,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8334:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0x00; txbuffer[1]=0x15; txbuffer[2]=0x05;
    8338:	00800544 	movi	r2,21
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x3, ALT_AVALON_I2C_NO_INTERRUPTS);
    833c:	8009883a 	mov	r4,r16
    8340:	000f883a 	mov	r7,zero
    8344:	018000c4 	movi	r6,3
    8348:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0xF9; txbuffer[1]=0x00; 
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0x00; txbuffer[1]=0x15; txbuffer[2]=0x05;
    834c:	d8808245 	stb	r2,521(sp)
    8350:	00800144 	movi	r2,5
    8354:	d8008205 	stb	zero,520(sp)
    8358:	d8808285 	stb	r2,522(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x3, ALT_AVALON_I2C_NO_INTERRUPTS);
    835c:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0x16; txbuffer[1]=0x34;
    8360:	00800584 	movi	r2,22
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8364:	880d883a 	mov	r6,r17
    8368:	8009883a 	mov	r4,r16
    836c:	000f883a 	mov	r7,zero
    8370:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0x00; txbuffer[1]=0x15; txbuffer[2]=0x05;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x3, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x16; txbuffer[1]=0x34;
    8374:	d8808205 	stb	r2,520(sp)
    8378:	00800d04 	movi	r2,52
    837c:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    8380:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	
	txbuffer[0]=0x17; txbuffer[1]=0x02;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);		
    8384:	880d883a 	mov	r6,r17
    8388:	8009883a 	mov	r4,r16
    838c:	000f883a 	mov	r7,zero
    8390:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x3, ALT_AVALON_I2C_NO_INTERRUPTS);
	
	txbuffer[0]=0x16; txbuffer[1]=0x34;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
	
	txbuffer[0]=0x17; txbuffer[1]=0x02;
    8394:	008005c4 	movi	r2,23
    8398:	dc408245 	stb	r17,521(sp)
    839c:	d8808205 	stb	r2,520(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);		
    83a0:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0x18; txbuffer[1]=0x00;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    83a4:	880d883a 	mov	r6,r17
    83a8:	8009883a 	mov	r4,r16
    83ac:	000f883a 	mov	r7,zero
    83b0:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
	
	txbuffer[0]=0x17; txbuffer[1]=0x02;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);		

	txbuffer[0]=0x18; txbuffer[1]=0x00;
    83b4:	00800604 	movi	r2,24
    83b8:	d8808205 	stb	r2,520(sp)
    83bc:	d8008245 	stb	zero,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    83c0:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0xAF; txbuffer[1]=0x02;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    83c4:	880d883a 	mov	r6,r17
    83c8:	8009883a 	mov	r4,r16
    83cc:	000f883a 	mov	r7,zero
    83d0:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);		

	txbuffer[0]=0x18; txbuffer[1]=0x00;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0xAF; txbuffer[1]=0x02;
    83d4:	00bfebc4 	movi	r2,-81
    83d8:	dc408245 	stb	r17,521(sp)
    83dc:	d8808205 	stb	r2,520(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	
    83e0:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>

	txbuffer[0]=0x4C; txbuffer[1]=0x04;
    83e4:	00801304 	movi	r2,76
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    83e8:	880d883a 	mov	r6,r17
    83ec:	8009883a 	mov	r4,r16
    83f0:	000f883a 	mov	r7,zero
    83f4:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0xAF; txbuffer[1]=0x02;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0x4C; txbuffer[1]=0x04;
    83f8:	d8808205 	stb	r2,520(sp)
    83fc:	00800104 	movi	r2,4
	txbuffer[0]=0x0;

	//read back the data into rxbuffer
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
    8400:	04803fc4 	movi	r18,255
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0xAF; txbuffer[1]=0x02;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0x4C; txbuffer[1]=0x04;
    8404:	d8808245 	stb	r2,521(sp)
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8408:	0009c380 	call	9c38 <alt_avalon_i2c_master_tx>
	txbuffer[0]=0x0;

	//read back the data into rxbuffer
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
    840c:	8009883a 	mov	r4,r16
    8410:	d9c00204 	addi	r7,sp,8
    8414:	d8000115 	stw	zero,4(sp)
    8418:	dc800015 	stw	r18,0(sp)
    841c:	01800044 	movi	r6,1
    8420:	d9408204 	addi	r5,sp,520
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);	

	txbuffer[0]=0x4C; txbuffer[1]=0x04;
	alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);

	txbuffer[0]=0x0;
    8424:	d8008205 	stb	zero,520(sp)

	//read back the data into rxbuffer
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
    8428:	000a19c0 	call	a19c <alt_avalon_i2c_master_tx_rx>
	//status=alt_avalon_i2c_master_rx(i2c_dev, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);

	for (i=0;i<0xff;i++) {
    842c:	0021883a 	mov	r16,zero
	txbuffer[0]=0x0;

	//read back the data into rxbuffer
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
    8430:	1027883a 	mov	r19,r2
    8434:	dc400204 	addi	r17,sp,8
	//status=alt_avalon_i2c_master_rx(i2c_dev, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);

	for (i=0;i<0xff;i++) {
		printf("RX[%x] = %x\n",i,rxbuffer[i]);
    8438:	89800003 	ldbu	r6,0(r17)
    843c:	01000074 	movhi	r4,1
    8440:	800b883a 	mov	r5,r16
    8444:	212ba704 	addi	r4,r4,-20836
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
	//status=alt_avalon_i2c_master_rx(i2c_dev, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);

	for (i=0;i<0xff;i++) {
    8448:	84000044 	addi	r16,r16,1
		printf("RX[%x] = %x\n",i,rxbuffer[i]);
    844c:	00084d80 	call	84d8 <printf>
    8450:	8c400044 	addi	r17,r17,1
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);
	//status=alt_avalon_i2c_master_rx(i2c_dev, rxbuffer, 0xff, ALT_AVALON_I2C_NO_INTERRUPTS);

	for (i=0;i<0xff;i++) {
    8454:	84bff81e 	bne	r16,r18,8438 <_gp+0xffff527c>
	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/hdmi_i2c");
	if (NULL==i2c_dev)
	{
		printf("Error: Cannot find /dev/i2c_0\n");
		return 1;
    8458:	9804c03a 	cmpne	r2,r19,zero
	for (i=0;i<0xff;i++) {
		printf("RX[%x] = %x\n",i,rxbuffer[i]);
	}
	if (status!=ALT_AVALON_I2C_SUCCESS) return 1; //FAIL
	return 0;
}
    845c:	dfc10617 	ldw	ra,1048(sp)
    8460:	dcc10517 	ldw	r19,1044(sp)
    8464:	dc810417 	ldw	r18,1040(sp)
    8468:	dc410317 	ldw	r17,1036(sp)
    846c:	dc010217 	ldw	r16,1032(sp)
    8470:	dec10704 	addi	sp,sp,1052
    8474:	f800283a 	ret


	txbuffer[0]=0x41; txbuffer[1]=0x10;
	status = alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x2, ALT_AVALON_I2C_NO_INTERRUPTS);
	if (status!=ALT_AVALON_I2C_SUCCESS)
		printf("write transaction failed\n");
    8478:	01000074 	movhi	r4,1
    847c:	212ba004 	addi	r4,r4,-20864
    8480:	00085a40 	call	85a4 <puts>
    8484:	003f6606 	br	8220 <_gp+0xffff5064>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/hdmi_i2c");
	if (NULL==i2c_dev)
	{
		printf("Error: Cannot find /dev/i2c_0\n");
    8488:	01000074 	movhi	r4,1
    848c:	212b9804 	addi	r4,r4,-20896
    8490:	00085a40 	call	85a4 <puts>
		return 1;
    8494:	00800044 	movi	r2,1
    8498:	003ff006 	br	845c <_gp+0xffff52a0>

0000849c <_printf_r>:
    849c:	defffd04 	addi	sp,sp,-12
    84a0:	dfc00015 	stw	ra,0(sp)
    84a4:	d9800115 	stw	r6,4(sp)
    84a8:	d9c00215 	stw	r7,8(sp)
    84ac:	20c00217 	ldw	r3,8(r4)
    84b0:	01800074 	movhi	r6,1
    84b4:	31a2e204 	addi	r6,r6,-29816
    84b8:	19800115 	stw	r6,4(r3)
    84bc:	280d883a 	mov	r6,r5
    84c0:	21400217 	ldw	r5,8(r4)
    84c4:	d9c00104 	addi	r7,sp,4
    84c8:	00086400 	call	8640 <___vfprintf_internal_r>
    84cc:	dfc00017 	ldw	ra,0(sp)
    84d0:	dec00304 	addi	sp,sp,12
    84d4:	f800283a 	ret

000084d8 <printf>:
    84d8:	defffc04 	addi	sp,sp,-16
    84dc:	dfc00015 	stw	ra,0(sp)
    84e0:	d9400115 	stw	r5,4(sp)
    84e4:	d9800215 	stw	r6,8(sp)
    84e8:	d9c00315 	stw	r7,12(sp)
    84ec:	00800074 	movhi	r2,1
    84f0:	10ac7004 	addi	r2,r2,-20032
    84f4:	10800017 	ldw	r2,0(r2)
    84f8:	01400074 	movhi	r5,1
    84fc:	2962e204 	addi	r5,r5,-29816
    8500:	10c00217 	ldw	r3,8(r2)
    8504:	d9800104 	addi	r6,sp,4
    8508:	19400115 	stw	r5,4(r3)
    850c:	200b883a 	mov	r5,r4
    8510:	11000217 	ldw	r4,8(r2)
    8514:	0008b6c0 	call	8b6c <__vfprintf_internal>
    8518:	dfc00017 	ldw	ra,0(sp)
    851c:	dec00404 	addi	sp,sp,16
    8520:	f800283a 	ret

00008524 <_puts_r>:
    8524:	defffd04 	addi	sp,sp,-12
    8528:	dc000015 	stw	r16,0(sp)
    852c:	2021883a 	mov	r16,r4
    8530:	2809883a 	mov	r4,r5
    8534:	dfc00215 	stw	ra,8(sp)
    8538:	dc400115 	stw	r17,4(sp)
    853c:	2823883a 	mov	r17,r5
    8540:	00085b80 	call	85b8 <strlen>
    8544:	81400217 	ldw	r5,8(r16)
    8548:	01000074 	movhi	r4,1
    854c:	2122e204 	addi	r4,r4,-29816
    8550:	29000115 	stw	r4,4(r5)
    8554:	100f883a 	mov	r7,r2
    8558:	880d883a 	mov	r6,r17
    855c:	8009883a 	mov	r4,r16
    8560:	0008b880 	call	8b88 <__sfvwrite_small_dev>
    8564:	00ffffc4 	movi	r3,-1
    8568:	10c00926 	beq	r2,r3,8590 <_puts_r+0x6c>
    856c:	81400217 	ldw	r5,8(r16)
    8570:	01800074 	movhi	r6,1
    8574:	01c00044 	movi	r7,1
    8578:	28800117 	ldw	r2,4(r5)
    857c:	31abab04 	addi	r6,r6,-20820
    8580:	8009883a 	mov	r4,r16
    8584:	103ee83a 	callr	r2
    8588:	10bfffe0 	cmpeqi	r2,r2,-1
    858c:	0085c83a 	sub	r2,zero,r2
    8590:	dfc00217 	ldw	ra,8(sp)
    8594:	dc400117 	ldw	r17,4(sp)
    8598:	dc000017 	ldw	r16,0(sp)
    859c:	dec00304 	addi	sp,sp,12
    85a0:	f800283a 	ret

000085a4 <puts>:
    85a4:	00800074 	movhi	r2,1
    85a8:	10ac7004 	addi	r2,r2,-20032
    85ac:	200b883a 	mov	r5,r4
    85b0:	11000017 	ldw	r4,0(r2)
    85b4:	00085241 	jmpi	8524 <_puts_r>

000085b8 <strlen>:
    85b8:	2005883a 	mov	r2,r4
    85bc:	10c00007 	ldb	r3,0(r2)
    85c0:	18000226 	beq	r3,zero,85cc <strlen+0x14>
    85c4:	10800044 	addi	r2,r2,1
    85c8:	003ffc06 	br	85bc <_gp+0xffff5400>
    85cc:	1105c83a 	sub	r2,r2,r4
    85d0:	f800283a 	ret

000085d4 <print_repeat>:
    85d4:	defffb04 	addi	sp,sp,-20
    85d8:	dc800315 	stw	r18,12(sp)
    85dc:	dc400215 	stw	r17,8(sp)
    85e0:	dc000115 	stw	r16,4(sp)
    85e4:	dfc00415 	stw	ra,16(sp)
    85e8:	2025883a 	mov	r18,r4
    85ec:	2823883a 	mov	r17,r5
    85f0:	d9800005 	stb	r6,0(sp)
    85f4:	3821883a 	mov	r16,r7
    85f8:	04000a0e 	bge	zero,r16,8624 <print_repeat+0x50>
    85fc:	88800117 	ldw	r2,4(r17)
    8600:	01c00044 	movi	r7,1
    8604:	d80d883a 	mov	r6,sp
    8608:	880b883a 	mov	r5,r17
    860c:	9009883a 	mov	r4,r18
    8610:	103ee83a 	callr	r2
    8614:	843fffc4 	addi	r16,r16,-1
    8618:	103ff726 	beq	r2,zero,85f8 <_gp+0xffff543c>
    861c:	00bfffc4 	movi	r2,-1
    8620:	00000106 	br	8628 <print_repeat+0x54>
    8624:	0005883a 	mov	r2,zero
    8628:	dfc00417 	ldw	ra,16(sp)
    862c:	dc800317 	ldw	r18,12(sp)
    8630:	dc400217 	ldw	r17,8(sp)
    8634:	dc000117 	ldw	r16,4(sp)
    8638:	dec00504 	addi	sp,sp,20
    863c:	f800283a 	ret

00008640 <___vfprintf_internal_r>:
    8640:	deffe504 	addi	sp,sp,-108
    8644:	d8c00804 	addi	r3,sp,32
    8648:	ddc01815 	stw	r23,96(sp)
    864c:	dd801715 	stw	r22,92(sp)
    8650:	dd401615 	stw	r21,88(sp)
    8654:	dd001515 	stw	r20,84(sp)
    8658:	dcc01415 	stw	r19,80(sp)
    865c:	dc801315 	stw	r18,76(sp)
    8660:	dc401215 	stw	r17,72(sp)
    8664:	dc001115 	stw	r16,68(sp)
    8668:	dfc01a15 	stw	ra,104(sp)
    866c:	df001915 	stw	fp,100(sp)
    8670:	2029883a 	mov	r20,r4
    8674:	2823883a 	mov	r17,r5
    8678:	382d883a 	mov	r22,r7
    867c:	d9800f15 	stw	r6,60(sp)
    8680:	0021883a 	mov	r16,zero
    8684:	d8000e15 	stw	zero,56(sp)
    8688:	d8000a15 	stw	zero,40(sp)
    868c:	002b883a 	mov	r21,zero
    8690:	0027883a 	mov	r19,zero
    8694:	0025883a 	mov	r18,zero
    8698:	d8000c15 	stw	zero,48(sp)
    869c:	d8000b15 	stw	zero,44(sp)
    86a0:	002f883a 	mov	r23,zero
    86a4:	d8c00915 	stw	r3,36(sp)
    86a8:	d8c00f17 	ldw	r3,60(sp)
    86ac:	19000003 	ldbu	r4,0(r3)
    86b0:	20803fcc 	andi	r2,r4,255
    86b4:	1080201c 	xori	r2,r2,128
    86b8:	10bfe004 	addi	r2,r2,-128
    86bc:	10011e26 	beq	r2,zero,8b38 <___vfprintf_internal_r+0x4f8>
    86c0:	00c00044 	movi	r3,1
    86c4:	b8c01426 	beq	r23,r3,8718 <___vfprintf_internal_r+0xd8>
    86c8:	1dc00216 	blt	r3,r23,86d4 <___vfprintf_internal_r+0x94>
    86cc:	b8000626 	beq	r23,zero,86e8 <___vfprintf_internal_r+0xa8>
    86d0:	00011506 	br	8b28 <___vfprintf_internal_r+0x4e8>
    86d4:	01400084 	movi	r5,2
    86d8:	b9401d26 	beq	r23,r5,8750 <___vfprintf_internal_r+0x110>
    86dc:	014000c4 	movi	r5,3
    86e0:	b9402b26 	beq	r23,r5,8790 <___vfprintf_internal_r+0x150>
    86e4:	00011006 	br	8b28 <___vfprintf_internal_r+0x4e8>
    86e8:	01400944 	movi	r5,37
    86ec:	1140fc26 	beq	r2,r5,8ae0 <___vfprintf_internal_r+0x4a0>
    86f0:	88800117 	ldw	r2,4(r17)
    86f4:	d9000005 	stb	r4,0(sp)
    86f8:	01c00044 	movi	r7,1
    86fc:	d80d883a 	mov	r6,sp
    8700:	880b883a 	mov	r5,r17
    8704:	a009883a 	mov	r4,r20
    8708:	103ee83a 	callr	r2
    870c:	1000d81e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8710:	84000044 	addi	r16,r16,1
    8714:	00010406 	br	8b28 <___vfprintf_internal_r+0x4e8>
    8718:	01400c04 	movi	r5,48
    871c:	1140fa26 	beq	r2,r5,8b08 <___vfprintf_internal_r+0x4c8>
    8720:	01400944 	movi	r5,37
    8724:	11400a1e 	bne	r2,r5,8750 <___vfprintf_internal_r+0x110>
    8728:	d8800005 	stb	r2,0(sp)
    872c:	88800117 	ldw	r2,4(r17)
    8730:	b80f883a 	mov	r7,r23
    8734:	d80d883a 	mov	r6,sp
    8738:	880b883a 	mov	r5,r17
    873c:	a009883a 	mov	r4,r20
    8740:	103ee83a 	callr	r2
    8744:	1000ca1e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8748:	84000044 	addi	r16,r16,1
    874c:	0000f506 	br	8b24 <___vfprintf_internal_r+0x4e4>
    8750:	25fff404 	addi	r23,r4,-48
    8754:	bdc03fcc 	andi	r23,r23,255
    8758:	00c00244 	movi	r3,9
    875c:	1dc00936 	bltu	r3,r23,8784 <___vfprintf_internal_r+0x144>
    8760:	00bfffc4 	movi	r2,-1
    8764:	90800426 	beq	r18,r2,8778 <___vfprintf_internal_r+0x138>
    8768:	01400284 	movi	r5,10
    876c:	9009883a 	mov	r4,r18
    8770:	0008e4c0 	call	8e4c <__mulsi3>
    8774:	00000106 	br	877c <___vfprintf_internal_r+0x13c>
    8778:	0005883a 	mov	r2,zero
    877c:	b8a5883a 	add	r18,r23,r2
    8780:	0000e206 	br	8b0c <___vfprintf_internal_r+0x4cc>
    8784:	01400b84 	movi	r5,46
    8788:	1140e426 	beq	r2,r5,8b1c <___vfprintf_internal_r+0x4dc>
    878c:	05c00084 	movi	r23,2
    8790:	213ff404 	addi	r4,r4,-48
    8794:	27003fcc 	andi	fp,r4,255
    8798:	00c00244 	movi	r3,9
    879c:	1f000936 	bltu	r3,fp,87c4 <___vfprintf_internal_r+0x184>
    87a0:	00bfffc4 	movi	r2,-1
    87a4:	98800426 	beq	r19,r2,87b8 <___vfprintf_internal_r+0x178>
    87a8:	01400284 	movi	r5,10
    87ac:	9809883a 	mov	r4,r19
    87b0:	0008e4c0 	call	8e4c <__mulsi3>
    87b4:	00000106 	br	87bc <___vfprintf_internal_r+0x17c>
    87b8:	0005883a 	mov	r2,zero
    87bc:	e0a7883a 	add	r19,fp,r2
    87c0:	0000d906 	br	8b28 <___vfprintf_internal_r+0x4e8>
    87c4:	00c01b04 	movi	r3,108
    87c8:	10c0d226 	beq	r2,r3,8b14 <___vfprintf_internal_r+0x4d4>
    87cc:	013fffc4 	movi	r4,-1
    87d0:	99000226 	beq	r19,r4,87dc <___vfprintf_internal_r+0x19c>
    87d4:	d8000b15 	stw	zero,44(sp)
    87d8:	00000106 	br	87e0 <___vfprintf_internal_r+0x1a0>
    87dc:	04c00044 	movi	r19,1
    87e0:	01001a44 	movi	r4,105
    87e4:	11001626 	beq	r2,r4,8840 <___vfprintf_internal_r+0x200>
    87e8:	20800916 	blt	r4,r2,8810 <___vfprintf_internal_r+0x1d0>
    87ec:	010018c4 	movi	r4,99
    87f0:	11008826 	beq	r2,r4,8a14 <___vfprintf_internal_r+0x3d4>
    87f4:	01001904 	movi	r4,100
    87f8:	11001126 	beq	r2,r4,8840 <___vfprintf_internal_r+0x200>
    87fc:	01001604 	movi	r4,88
    8800:	1100c81e 	bne	r2,r4,8b24 <___vfprintf_internal_r+0x4e4>
    8804:	00c00044 	movi	r3,1
    8808:	d8c00e15 	stw	r3,56(sp)
    880c:	00001506 	br	8864 <___vfprintf_internal_r+0x224>
    8810:	01001cc4 	movi	r4,115
    8814:	11009826 	beq	r2,r4,8a78 <___vfprintf_internal_r+0x438>
    8818:	20800416 	blt	r4,r2,882c <___vfprintf_internal_r+0x1ec>
    881c:	01001bc4 	movi	r4,111
    8820:	1100c01e 	bne	r2,r4,8b24 <___vfprintf_internal_r+0x4e4>
    8824:	05400204 	movi	r21,8
    8828:	00000f06 	br	8868 <___vfprintf_internal_r+0x228>
    882c:	01001d44 	movi	r4,117
    8830:	11000d26 	beq	r2,r4,8868 <___vfprintf_internal_r+0x228>
    8834:	01001e04 	movi	r4,120
    8838:	11000a26 	beq	r2,r4,8864 <___vfprintf_internal_r+0x224>
    883c:	0000b906 	br	8b24 <___vfprintf_internal_r+0x4e4>
    8840:	d8c00a17 	ldw	r3,40(sp)
    8844:	b7000104 	addi	fp,r22,4
    8848:	18000726 	beq	r3,zero,8868 <___vfprintf_internal_r+0x228>
    884c:	df000d15 	stw	fp,52(sp)
    8850:	b5c00017 	ldw	r23,0(r22)
    8854:	b800080e 	bge	r23,zero,8878 <___vfprintf_internal_r+0x238>
    8858:	05efc83a 	sub	r23,zero,r23
    885c:	02400044 	movi	r9,1
    8860:	00000606 	br	887c <___vfprintf_internal_r+0x23c>
    8864:	05400404 	movi	r21,16
    8868:	b0c00104 	addi	r3,r22,4
    886c:	d8c00d15 	stw	r3,52(sp)
    8870:	b5c00017 	ldw	r23,0(r22)
    8874:	d8000a15 	stw	zero,40(sp)
    8878:	0013883a 	mov	r9,zero
    887c:	d839883a 	mov	fp,sp
    8880:	b8001726 	beq	r23,zero,88e0 <___vfprintf_internal_r+0x2a0>
    8884:	a80b883a 	mov	r5,r21
    8888:	b809883a 	mov	r4,r23
    888c:	da401015 	stw	r9,64(sp)
    8890:	0008d900 	call	8d90 <__udivsi3>
    8894:	a80b883a 	mov	r5,r21
    8898:	1009883a 	mov	r4,r2
    889c:	102d883a 	mov	r22,r2
    88a0:	0008e4c0 	call	8e4c <__mulsi3>
    88a4:	b885c83a 	sub	r2,r23,r2
    88a8:	00c00244 	movi	r3,9
    88ac:	da401017 	ldw	r9,64(sp)
    88b0:	18800216 	blt	r3,r2,88bc <___vfprintf_internal_r+0x27c>
    88b4:	10800c04 	addi	r2,r2,48
    88b8:	00000506 	br	88d0 <___vfprintf_internal_r+0x290>
    88bc:	d8c00e17 	ldw	r3,56(sp)
    88c0:	18000226 	beq	r3,zero,88cc <___vfprintf_internal_r+0x28c>
    88c4:	10800dc4 	addi	r2,r2,55
    88c8:	00000106 	br	88d0 <___vfprintf_internal_r+0x290>
    88cc:	108015c4 	addi	r2,r2,87
    88d0:	e0800005 	stb	r2,0(fp)
    88d4:	b02f883a 	mov	r23,r22
    88d8:	e7000044 	addi	fp,fp,1
    88dc:	003fe806 	br	8880 <_gp+0xffff56c4>
    88e0:	e6efc83a 	sub	r23,fp,sp
    88e4:	9dc5c83a 	sub	r2,r19,r23
    88e8:	0080090e 	bge	zero,r2,8910 <___vfprintf_internal_r+0x2d0>
    88ec:	e085883a 	add	r2,fp,r2
    88f0:	01400c04 	movi	r5,48
    88f4:	d8c00917 	ldw	r3,36(sp)
    88f8:	e009883a 	mov	r4,fp
    88fc:	e0c0032e 	bgeu	fp,r3,890c <___vfprintf_internal_r+0x2cc>
    8900:	e7000044 	addi	fp,fp,1
    8904:	21400005 	stb	r5,0(r4)
    8908:	e0bffa1e 	bne	fp,r2,88f4 <_gp+0xffff5738>
    890c:	e6efc83a 	sub	r23,fp,sp
    8910:	d8c00b17 	ldw	r3,44(sp)
    8914:	4dd1883a 	add	r8,r9,r23
    8918:	922dc83a 	sub	r22,r18,r8
    891c:	18001626 	beq	r3,zero,8978 <___vfprintf_internal_r+0x338>
    8920:	48000a26 	beq	r9,zero,894c <___vfprintf_internal_r+0x30c>
    8924:	00800b44 	movi	r2,45
    8928:	d8800805 	stb	r2,32(sp)
    892c:	88800117 	ldw	r2,4(r17)
    8930:	01c00044 	movi	r7,1
    8934:	d9800804 	addi	r6,sp,32
    8938:	880b883a 	mov	r5,r17
    893c:	a009883a 	mov	r4,r20
    8940:	103ee83a 	callr	r2
    8944:	10004a1e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8948:	84000044 	addi	r16,r16,1
    894c:	0580070e 	bge	zero,r22,896c <___vfprintf_internal_r+0x32c>
    8950:	b00f883a 	mov	r7,r22
    8954:	01800c04 	movi	r6,48
    8958:	880b883a 	mov	r5,r17
    895c:	a009883a 	mov	r4,r20
    8960:	00085d40 	call	85d4 <print_repeat>
    8964:	1000421e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8968:	85a1883a 	add	r16,r16,r22
    896c:	e02d883a 	mov	r22,fp
    8970:	bf2fc83a 	sub	r23,r23,fp
    8974:	00002006 	br	89f8 <___vfprintf_internal_r+0x3b8>
    8978:	0580090e 	bge	zero,r22,89a0 <___vfprintf_internal_r+0x360>
    897c:	b00f883a 	mov	r7,r22
    8980:	01800804 	movi	r6,32
    8984:	880b883a 	mov	r5,r17
    8988:	a009883a 	mov	r4,r20
    898c:	da401015 	stw	r9,64(sp)
    8990:	00085d40 	call	85d4 <print_repeat>
    8994:	da401017 	ldw	r9,64(sp)
    8998:	1000351e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    899c:	85a1883a 	add	r16,r16,r22
    89a0:	483ff226 	beq	r9,zero,896c <_gp+0xffff57b0>
    89a4:	00800b44 	movi	r2,45
    89a8:	d8800805 	stb	r2,32(sp)
    89ac:	88800117 	ldw	r2,4(r17)
    89b0:	01c00044 	movi	r7,1
    89b4:	d9800804 	addi	r6,sp,32
    89b8:	880b883a 	mov	r5,r17
    89bc:	a009883a 	mov	r4,r20
    89c0:	103ee83a 	callr	r2
    89c4:	10002a1e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    89c8:	84000044 	addi	r16,r16,1
    89cc:	003fe706 	br	896c <_gp+0xffff57b0>
    89d0:	b5bfffc4 	addi	r22,r22,-1
    89d4:	b0800003 	ldbu	r2,0(r22)
    89d8:	01c00044 	movi	r7,1
    89dc:	d9800804 	addi	r6,sp,32
    89e0:	d8800805 	stb	r2,32(sp)
    89e4:	88800117 	ldw	r2,4(r17)
    89e8:	880b883a 	mov	r5,r17
    89ec:	a009883a 	mov	r4,r20
    89f0:	103ee83a 	callr	r2
    89f4:	10001e1e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    89f8:	8585c83a 	sub	r2,r16,r22
    89fc:	b5c9883a 	add	r4,r22,r23
    8a00:	e085883a 	add	r2,fp,r2
    8a04:	013ff216 	blt	zero,r4,89d0 <_gp+0xffff5814>
    8a08:	1021883a 	mov	r16,r2
    8a0c:	dd800d17 	ldw	r22,52(sp)
    8a10:	00004406 	br	8b24 <___vfprintf_internal_r+0x4e4>
    8a14:	00800044 	movi	r2,1
    8a18:	1480080e 	bge	r2,r18,8a3c <___vfprintf_internal_r+0x3fc>
    8a1c:	95ffffc4 	addi	r23,r18,-1
    8a20:	b80f883a 	mov	r7,r23
    8a24:	01800804 	movi	r6,32
    8a28:	880b883a 	mov	r5,r17
    8a2c:	a009883a 	mov	r4,r20
    8a30:	00085d40 	call	85d4 <print_repeat>
    8a34:	10000e1e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8a38:	85e1883a 	add	r16,r16,r23
    8a3c:	b0800017 	ldw	r2,0(r22)
    8a40:	01c00044 	movi	r7,1
    8a44:	d80d883a 	mov	r6,sp
    8a48:	d8800005 	stb	r2,0(sp)
    8a4c:	88800117 	ldw	r2,4(r17)
    8a50:	880b883a 	mov	r5,r17
    8a54:	a009883a 	mov	r4,r20
    8a58:	b5c00104 	addi	r23,r22,4
    8a5c:	103ee83a 	callr	r2
    8a60:	1000031e 	bne	r2,zero,8a70 <___vfprintf_internal_r+0x430>
    8a64:	84000044 	addi	r16,r16,1
    8a68:	b82d883a 	mov	r22,r23
    8a6c:	00002d06 	br	8b24 <___vfprintf_internal_r+0x4e4>
    8a70:	00bfffc4 	movi	r2,-1
    8a74:	00003106 	br	8b3c <___vfprintf_internal_r+0x4fc>
    8a78:	b5c00017 	ldw	r23,0(r22)
    8a7c:	b7000104 	addi	fp,r22,4
    8a80:	b809883a 	mov	r4,r23
    8a84:	00085b80 	call	85b8 <strlen>
    8a88:	9091c83a 	sub	r8,r18,r2
    8a8c:	102d883a 	mov	r22,r2
    8a90:	0200090e 	bge	zero,r8,8ab8 <___vfprintf_internal_r+0x478>
    8a94:	400f883a 	mov	r7,r8
    8a98:	01800804 	movi	r6,32
    8a9c:	880b883a 	mov	r5,r17
    8aa0:	a009883a 	mov	r4,r20
    8aa4:	da001015 	stw	r8,64(sp)
    8aa8:	00085d40 	call	85d4 <print_repeat>
    8aac:	da001017 	ldw	r8,64(sp)
    8ab0:	103fef1e 	bne	r2,zero,8a70 <_gp+0xffff58b4>
    8ab4:	8221883a 	add	r16,r16,r8
    8ab8:	88800117 	ldw	r2,4(r17)
    8abc:	b00f883a 	mov	r7,r22
    8ac0:	b80d883a 	mov	r6,r23
    8ac4:	880b883a 	mov	r5,r17
    8ac8:	a009883a 	mov	r4,r20
    8acc:	103ee83a 	callr	r2
    8ad0:	103fe71e 	bne	r2,zero,8a70 <_gp+0xffff58b4>
    8ad4:	85a1883a 	add	r16,r16,r22
    8ad8:	e02d883a 	mov	r22,fp
    8adc:	00001106 	br	8b24 <___vfprintf_internal_r+0x4e4>
    8ae0:	00c00044 	movi	r3,1
    8ae4:	04ffffc4 	movi	r19,-1
    8ae8:	d8000e15 	stw	zero,56(sp)
    8aec:	d8c00a15 	stw	r3,40(sp)
    8af0:	05400284 	movi	r21,10
    8af4:	9825883a 	mov	r18,r19
    8af8:	d8000c15 	stw	zero,48(sp)
    8afc:	d8000b15 	stw	zero,44(sp)
    8b00:	182f883a 	mov	r23,r3
    8b04:	00000806 	br	8b28 <___vfprintf_internal_r+0x4e8>
    8b08:	ddc00b15 	stw	r23,44(sp)
    8b0c:	05c00084 	movi	r23,2
    8b10:	00000506 	br	8b28 <___vfprintf_internal_r+0x4e8>
    8b14:	00c00044 	movi	r3,1
    8b18:	d8c00c15 	stw	r3,48(sp)
    8b1c:	05c000c4 	movi	r23,3
    8b20:	00000106 	br	8b28 <___vfprintf_internal_r+0x4e8>
    8b24:	002f883a 	mov	r23,zero
    8b28:	d8c00f17 	ldw	r3,60(sp)
    8b2c:	18c00044 	addi	r3,r3,1
    8b30:	d8c00f15 	stw	r3,60(sp)
    8b34:	003edc06 	br	86a8 <_gp+0xffff54ec>
    8b38:	8005883a 	mov	r2,r16
    8b3c:	dfc01a17 	ldw	ra,104(sp)
    8b40:	df001917 	ldw	fp,100(sp)
    8b44:	ddc01817 	ldw	r23,96(sp)
    8b48:	dd801717 	ldw	r22,92(sp)
    8b4c:	dd401617 	ldw	r21,88(sp)
    8b50:	dd001517 	ldw	r20,84(sp)
    8b54:	dcc01417 	ldw	r19,80(sp)
    8b58:	dc801317 	ldw	r18,76(sp)
    8b5c:	dc401217 	ldw	r17,72(sp)
    8b60:	dc001117 	ldw	r16,68(sp)
    8b64:	dec01b04 	addi	sp,sp,108
    8b68:	f800283a 	ret

00008b6c <__vfprintf_internal>:
    8b6c:	00800074 	movhi	r2,1
    8b70:	10ac7004 	addi	r2,r2,-20032
    8b74:	300f883a 	mov	r7,r6
    8b78:	280d883a 	mov	r6,r5
    8b7c:	200b883a 	mov	r5,r4
    8b80:	11000017 	ldw	r4,0(r2)
    8b84:	00086401 	jmpi	8640 <___vfprintf_internal_r>

00008b88 <__sfvwrite_small_dev>:
    8b88:	2880000b 	ldhu	r2,0(r5)
    8b8c:	1080020c 	andi	r2,r2,8
    8b90:	10002126 	beq	r2,zero,8c18 <__sfvwrite_small_dev+0x90>
    8b94:	2880008f 	ldh	r2,2(r5)
    8b98:	defffa04 	addi	sp,sp,-24
    8b9c:	dc000015 	stw	r16,0(sp)
    8ba0:	dfc00515 	stw	ra,20(sp)
    8ba4:	dd000415 	stw	r20,16(sp)
    8ba8:	dcc00315 	stw	r19,12(sp)
    8bac:	dc800215 	stw	r18,8(sp)
    8bb0:	dc400115 	stw	r17,4(sp)
    8bb4:	2821883a 	mov	r16,r5
    8bb8:	10001216 	blt	r2,zero,8c04 <__sfvwrite_small_dev+0x7c>
    8bbc:	2027883a 	mov	r19,r4
    8bc0:	3025883a 	mov	r18,r6
    8bc4:	3823883a 	mov	r17,r7
    8bc8:	05010004 	movi	r20,1024
    8bcc:	04400b0e 	bge	zero,r17,8bfc <__sfvwrite_small_dev+0x74>
    8bd0:	880f883a 	mov	r7,r17
    8bd4:	a440010e 	bge	r20,r17,8bdc <__sfvwrite_small_dev+0x54>
    8bd8:	01c10004 	movi	r7,1024
    8bdc:	8140008f 	ldh	r5,2(r16)
    8be0:	900d883a 	mov	r6,r18
    8be4:	9809883a 	mov	r4,r19
    8be8:	0008c400 	call	8c40 <_write_r>
    8bec:	0080050e 	bge	zero,r2,8c04 <__sfvwrite_small_dev+0x7c>
    8bf0:	88a3c83a 	sub	r17,r17,r2
    8bf4:	90a5883a 	add	r18,r18,r2
    8bf8:	003ff406 	br	8bcc <_gp+0xffff5a10>
    8bfc:	0005883a 	mov	r2,zero
    8c00:	00000706 	br	8c20 <__sfvwrite_small_dev+0x98>
    8c04:	8080000b 	ldhu	r2,0(r16)
    8c08:	10801014 	ori	r2,r2,64
    8c0c:	8080000d 	sth	r2,0(r16)
    8c10:	00bfffc4 	movi	r2,-1
    8c14:	00000206 	br	8c20 <__sfvwrite_small_dev+0x98>
    8c18:	00bfffc4 	movi	r2,-1
    8c1c:	f800283a 	ret
    8c20:	dfc00517 	ldw	ra,20(sp)
    8c24:	dd000417 	ldw	r20,16(sp)
    8c28:	dcc00317 	ldw	r19,12(sp)
    8c2c:	dc800217 	ldw	r18,8(sp)
    8c30:	dc400117 	ldw	r17,4(sp)
    8c34:	dc000017 	ldw	r16,0(sp)
    8c38:	dec00604 	addi	sp,sp,24
    8c3c:	f800283a 	ret

00008c40 <_write_r>:
    8c40:	defffd04 	addi	sp,sp,-12
    8c44:	dc000015 	stw	r16,0(sp)
    8c48:	04000074 	movhi	r16,1
    8c4c:	dc400115 	stw	r17,4(sp)
    8c50:	842d4004 	addi	r16,r16,-19200
    8c54:	2023883a 	mov	r17,r4
    8c58:	2809883a 	mov	r4,r5
    8c5c:	300b883a 	mov	r5,r6
    8c60:	380d883a 	mov	r6,r7
    8c64:	dfc00215 	stw	ra,8(sp)
    8c68:	80000015 	stw	zero,0(r16)
    8c6c:	0008fd80 	call	8fd8 <write>
    8c70:	00ffffc4 	movi	r3,-1
    8c74:	10c0031e 	bne	r2,r3,8c84 <_write_r+0x44>
    8c78:	80c00017 	ldw	r3,0(r16)
    8c7c:	18000126 	beq	r3,zero,8c84 <_write_r+0x44>
    8c80:	88c00015 	stw	r3,0(r17)
    8c84:	dfc00217 	ldw	ra,8(sp)
    8c88:	dc400117 	ldw	r17,4(sp)
    8c8c:	dc000017 	ldw	r16,0(sp)
    8c90:	dec00304 	addi	sp,sp,12
    8c94:	f800283a 	ret

00008c98 <__divsi3>:
    8c98:	20001b16 	blt	r4,zero,8d08 <__divsi3+0x70>
    8c9c:	000f883a 	mov	r7,zero
    8ca0:	28001616 	blt	r5,zero,8cfc <__divsi3+0x64>
    8ca4:	200d883a 	mov	r6,r4
    8ca8:	29001a2e 	bgeu	r5,r4,8d14 <__divsi3+0x7c>
    8cac:	00800804 	movi	r2,32
    8cb0:	00c00044 	movi	r3,1
    8cb4:	00000106 	br	8cbc <__divsi3+0x24>
    8cb8:	10000d26 	beq	r2,zero,8cf0 <__divsi3+0x58>
    8cbc:	294b883a 	add	r5,r5,r5
    8cc0:	10bfffc4 	addi	r2,r2,-1
    8cc4:	18c7883a 	add	r3,r3,r3
    8cc8:	293ffb36 	bltu	r5,r4,8cb8 <_gp+0xffff5afc>
    8ccc:	0005883a 	mov	r2,zero
    8cd0:	18000726 	beq	r3,zero,8cf0 <__divsi3+0x58>
    8cd4:	0005883a 	mov	r2,zero
    8cd8:	31400236 	bltu	r6,r5,8ce4 <__divsi3+0x4c>
    8cdc:	314dc83a 	sub	r6,r6,r5
    8ce0:	10c4b03a 	or	r2,r2,r3
    8ce4:	1806d07a 	srli	r3,r3,1
    8ce8:	280ad07a 	srli	r5,r5,1
    8cec:	183ffa1e 	bne	r3,zero,8cd8 <_gp+0xffff5b1c>
    8cf0:	38000126 	beq	r7,zero,8cf8 <__divsi3+0x60>
    8cf4:	0085c83a 	sub	r2,zero,r2
    8cf8:	f800283a 	ret
    8cfc:	014bc83a 	sub	r5,zero,r5
    8d00:	39c0005c 	xori	r7,r7,1
    8d04:	003fe706 	br	8ca4 <_gp+0xffff5ae8>
    8d08:	0109c83a 	sub	r4,zero,r4
    8d0c:	01c00044 	movi	r7,1
    8d10:	003fe306 	br	8ca0 <_gp+0xffff5ae4>
    8d14:	00c00044 	movi	r3,1
    8d18:	003fee06 	br	8cd4 <_gp+0xffff5b18>

00008d1c <__modsi3>:
    8d1c:	20001716 	blt	r4,zero,8d7c <__modsi3+0x60>
    8d20:	000f883a 	mov	r7,zero
    8d24:	2005883a 	mov	r2,r4
    8d28:	28001216 	blt	r5,zero,8d74 <__modsi3+0x58>
    8d2c:	2900162e 	bgeu	r5,r4,8d88 <__modsi3+0x6c>
    8d30:	01800804 	movi	r6,32
    8d34:	00c00044 	movi	r3,1
    8d38:	00000106 	br	8d40 <__modsi3+0x24>
    8d3c:	30000a26 	beq	r6,zero,8d68 <__modsi3+0x4c>
    8d40:	294b883a 	add	r5,r5,r5
    8d44:	31bfffc4 	addi	r6,r6,-1
    8d48:	18c7883a 	add	r3,r3,r3
    8d4c:	293ffb36 	bltu	r5,r4,8d3c <_gp+0xffff5b80>
    8d50:	18000526 	beq	r3,zero,8d68 <__modsi3+0x4c>
    8d54:	1806d07a 	srli	r3,r3,1
    8d58:	11400136 	bltu	r2,r5,8d60 <__modsi3+0x44>
    8d5c:	1145c83a 	sub	r2,r2,r5
    8d60:	280ad07a 	srli	r5,r5,1
    8d64:	183ffb1e 	bne	r3,zero,8d54 <_gp+0xffff5b98>
    8d68:	38000126 	beq	r7,zero,8d70 <__modsi3+0x54>
    8d6c:	0085c83a 	sub	r2,zero,r2
    8d70:	f800283a 	ret
    8d74:	014bc83a 	sub	r5,zero,r5
    8d78:	003fec06 	br	8d2c <_gp+0xffff5b70>
    8d7c:	0109c83a 	sub	r4,zero,r4
    8d80:	01c00044 	movi	r7,1
    8d84:	003fe706 	br	8d24 <_gp+0xffff5b68>
    8d88:	00c00044 	movi	r3,1
    8d8c:	003ff106 	br	8d54 <_gp+0xffff5b98>

00008d90 <__udivsi3>:
    8d90:	200d883a 	mov	r6,r4
    8d94:	2900152e 	bgeu	r5,r4,8dec <__udivsi3+0x5c>
    8d98:	28001416 	blt	r5,zero,8dec <__udivsi3+0x5c>
    8d9c:	00800804 	movi	r2,32
    8da0:	00c00044 	movi	r3,1
    8da4:	00000206 	br	8db0 <__udivsi3+0x20>
    8da8:	10000e26 	beq	r2,zero,8de4 <__udivsi3+0x54>
    8dac:	28000516 	blt	r5,zero,8dc4 <__udivsi3+0x34>
    8db0:	294b883a 	add	r5,r5,r5
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	18c7883a 	add	r3,r3,r3
    8dbc:	293ffa36 	bltu	r5,r4,8da8 <_gp+0xffff5bec>
    8dc0:	18000826 	beq	r3,zero,8de4 <__udivsi3+0x54>
    8dc4:	0005883a 	mov	r2,zero
    8dc8:	31400236 	bltu	r6,r5,8dd4 <__udivsi3+0x44>
    8dcc:	314dc83a 	sub	r6,r6,r5
    8dd0:	10c4b03a 	or	r2,r2,r3
    8dd4:	1806d07a 	srli	r3,r3,1
    8dd8:	280ad07a 	srli	r5,r5,1
    8ddc:	183ffa1e 	bne	r3,zero,8dc8 <_gp+0xffff5c0c>
    8de0:	f800283a 	ret
    8de4:	0005883a 	mov	r2,zero
    8de8:	f800283a 	ret
    8dec:	00c00044 	movi	r3,1
    8df0:	003ff406 	br	8dc4 <_gp+0xffff5c08>

00008df4 <__umodsi3>:
    8df4:	2005883a 	mov	r2,r4
    8df8:	2900122e 	bgeu	r5,r4,8e44 <__umodsi3+0x50>
    8dfc:	28001116 	blt	r5,zero,8e44 <__umodsi3+0x50>
    8e00:	01800804 	movi	r6,32
    8e04:	00c00044 	movi	r3,1
    8e08:	00000206 	br	8e14 <__umodsi3+0x20>
    8e0c:	30000c26 	beq	r6,zero,8e40 <__umodsi3+0x4c>
    8e10:	28000516 	blt	r5,zero,8e28 <__umodsi3+0x34>
    8e14:	294b883a 	add	r5,r5,r5
    8e18:	31bfffc4 	addi	r6,r6,-1
    8e1c:	18c7883a 	add	r3,r3,r3
    8e20:	293ffa36 	bltu	r5,r4,8e0c <_gp+0xffff5c50>
    8e24:	18000626 	beq	r3,zero,8e40 <__umodsi3+0x4c>
    8e28:	1806d07a 	srli	r3,r3,1
    8e2c:	11400136 	bltu	r2,r5,8e34 <__umodsi3+0x40>
    8e30:	1145c83a 	sub	r2,r2,r5
    8e34:	280ad07a 	srli	r5,r5,1
    8e38:	183ffb1e 	bne	r3,zero,8e28 <_gp+0xffff5c6c>
    8e3c:	f800283a 	ret
    8e40:	f800283a 	ret
    8e44:	00c00044 	movi	r3,1
    8e48:	003ff706 	br	8e28 <_gp+0xffff5c6c>

00008e4c <__mulsi3>:
    8e4c:	0005883a 	mov	r2,zero
    8e50:	20000726 	beq	r4,zero,8e70 <__mulsi3+0x24>
    8e54:	20c0004c 	andi	r3,r4,1
    8e58:	2008d07a 	srli	r4,r4,1
    8e5c:	18000126 	beq	r3,zero,8e64 <__mulsi3+0x18>
    8e60:	1145883a 	add	r2,r2,r5
    8e64:	294b883a 	add	r5,r5,r5
    8e68:	203ffa1e 	bne	r4,zero,8e54 <_gp+0xffff5c98>
    8e6c:	f800283a 	ret
    8e70:	f800283a 	ret

00008e74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e74:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8e78:	01800074 	movhi	r6,1
    8e7c:	01c00074 	movhi	r7,1
    8e80:	dfc00015 	stw	ra,0(sp)
    8e84:	31abb404 	addi	r6,r6,-20784
    8e88:	39ec7a04 	addi	r7,r7,-19992
    8e8c:	31c01026 	beq	r6,r7,8ed0 <alt_load+0x5c>
  {
    while( to != end )
    8e90:	00800074 	movhi	r2,1
    8e94:	10ac7a04 	addi	r2,r2,-19992
    8e98:	30800d26 	beq	r6,r2,8ed0 <alt_load+0x5c>
    8e9c:	30c00104 	addi	r3,r6,4
    8ea0:	10c7c83a 	sub	r3,r2,r3
    8ea4:	1806d0ba 	srli	r3,r3,2
    8ea8:	0005883a 	mov	r2,zero
    8eac:	18c00044 	addi	r3,r3,1
    8eb0:	18c7883a 	add	r3,r3,r3
    8eb4:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    8eb8:	11c9883a 	add	r4,r2,r7
    8ebc:	21400017 	ldw	r5,0(r4)
    8ec0:	1189883a 	add	r4,r2,r6
    8ec4:	10800104 	addi	r2,r2,4
    8ec8:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ecc:	10fffa1e 	bne	r2,r3,8eb8 <_gp+0xffff5cfc>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ed0:	01800074 	movhi	r6,1
    8ed4:	01c00074 	movhi	r7,1
    8ed8:	31a00804 	addi	r6,r6,-32736
    8edc:	39e00804 	addi	r7,r7,-32736
    8ee0:	31c01026 	beq	r6,r7,8f24 <alt_load+0xb0>
  {
    while( to != end )
    8ee4:	00800074 	movhi	r2,1
    8ee8:	10a06104 	addi	r2,r2,-32380
    8eec:	30800d26 	beq	r6,r2,8f24 <alt_load+0xb0>
    8ef0:	30c00104 	addi	r3,r6,4
    8ef4:	10c7c83a 	sub	r3,r2,r3
    8ef8:	1806d0ba 	srli	r3,r3,2
    8efc:	0005883a 	mov	r2,zero
    8f00:	18c00044 	addi	r3,r3,1
    8f04:	18c7883a 	add	r3,r3,r3
    8f08:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    8f0c:	11c9883a 	add	r4,r2,r7
    8f10:	21400017 	ldw	r5,0(r4)
    8f14:	1189883a 	add	r4,r2,r6
    8f18:	10800104 	addi	r2,r2,4
    8f1c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8f20:	18bffa1e 	bne	r3,r2,8f0c <_gp+0xffff5d50>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f24:	01800074 	movhi	r6,1
    8f28:	01c00074 	movhi	r7,1
    8f2c:	31ab9404 	addi	r6,r6,-20912
    8f30:	39eb9404 	addi	r7,r7,-20912
    8f34:	31c01026 	beq	r6,r7,8f78 <alt_load+0x104>
  {
    while( to != end )
    8f38:	00800074 	movhi	r2,1
    8f3c:	10abb404 	addi	r2,r2,-20784
    8f40:	30800d26 	beq	r6,r2,8f78 <alt_load+0x104>
    8f44:	30c00104 	addi	r3,r6,4
    8f48:	10c7c83a 	sub	r3,r2,r3
    8f4c:	1806d0ba 	srli	r3,r3,2
    8f50:	0005883a 	mov	r2,zero
    8f54:	18c00044 	addi	r3,r3,1
    8f58:	18c7883a 	add	r3,r3,r3
    8f5c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
    8f60:	11c9883a 	add	r4,r2,r7
    8f64:	21400017 	ldw	r5,0(r4)
    8f68:	1189883a 	add	r4,r2,r6
    8f6c:	10800104 	addi	r2,r2,4
    8f70:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8f74:	10fffa1e 	bne	r2,r3,8f60 <_gp+0xffff5da4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f78:	000a5e00 	call	a5e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8f7c:	dfc00017 	ldw	ra,0(sp)
    8f80:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8f84:	000a6d01 	jmpi	a6d0 <alt_icache_flush_all>

00008f88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8f88:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8f8c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8f90:	dfc00115 	stw	ra,4(sp)
    8f94:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8f98:	00090e80 	call	90e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8f9c:	00091080 	call	9108 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8fa0:	01800074 	movhi	r6,1
    8fa4:	31abac04 	addi	r6,r6,-20816
    8fa8:	300b883a 	mov	r5,r6
    8fac:	3009883a 	mov	r4,r6
    8fb0:	000a8540 	call	a854 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8fb4:	d1a0d217 	ldw	r6,-31928(gp)
    8fb8:	d160d317 	ldw	r5,-31924(gp)
    8fbc:	d120d417 	ldw	r4,-31920(gp)
    8fc0:	00081c00 	call	81c0 <main>
  close(STDOUT_FILENO);
    8fc4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8fc8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    8fcc:	000a5200 	call	a520 <close>
  exit (result);
    8fd0:	8009883a 	mov	r4,r16
    8fd4:	000ac5c0 	call	ac5c <exit>

00008fd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8fd8:	defffa04 	addi	sp,sp,-24
    8fdc:	dfc00515 	stw	ra,20(sp)
    8fe0:	dd000415 	stw	r20,16(sp)
    8fe4:	dcc00315 	stw	r19,12(sp)
    8fe8:	dc800215 	stw	r18,8(sp)
    8fec:	dc400115 	stw	r17,4(sp)
    8ff0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8ff4:	20003116 	blt	r4,zero,90bc <write+0xe4>
    8ff8:	2827883a 	mov	r19,r5
    8ffc:	04000074 	movhi	r16,1
    9000:	01400304 	movi	r5,12
    9004:	2025883a 	mov	r18,r4
    9008:	3029883a 	mov	r20,r6
    900c:	842c0504 	addi	r16,r16,-20460
    9010:	0008e4c0 	call	8e4c <__mulsi3>
    9014:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    9018:	88002826 	beq	r17,zero,90bc <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    901c:	88800217 	ldw	r2,8(r17)
    9020:	108000cc 	andi	r2,r2,3
    9024:	10001526 	beq	r2,zero,907c <write+0xa4>
    9028:	01400304 	movi	r5,12
    902c:	9009883a 	mov	r4,r18
    9030:	0008e4c0 	call	8e4c <__mulsi3>
    9034:	8085883a 	add	r2,r16,r2
    9038:	10800017 	ldw	r2,0(r2)
    903c:	10800617 	ldw	r2,24(r2)
    9040:	10000e26 	beq	r2,zero,907c <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9044:	a00d883a 	mov	r6,r20
    9048:	980b883a 	mov	r5,r19
    904c:	8809883a 	mov	r4,r17
    9050:	103ee83a 	callr	r2
    9054:	1021883a 	mov	r16,r2
    9058:	10001116 	blt	r2,zero,90a0 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    905c:	dfc00517 	ldw	ra,20(sp)
    9060:	dd000417 	ldw	r20,16(sp)
    9064:	dcc00317 	ldw	r19,12(sp)
    9068:	dc800217 	ldw	r18,8(sp)
    906c:	dc400117 	ldw	r17,4(sp)
    9070:	dc000017 	ldw	r16,0(sp)
    9074:	dec00604 	addi	sp,sp,24
    9078:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    907c:	d0a00917 	ldw	r2,-32732(gp)
    9080:	10000526 	beq	r2,zero,9098 <write+0xc0>
    9084:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    9088:	00c00344 	movi	r3,13
    908c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    9090:	00bfffc4 	movi	r2,-1
    9094:	003ff106 	br	905c <_gp+0xffff5ea0>
    9098:	d0a0d104 	addi	r2,gp,-31932
    909c:	003ffa06 	br	9088 <_gp+0xffff5ecc>
    90a0:	d0a00917 	ldw	r2,-32732(gp)
    90a4:	10000c26 	beq	r2,zero,90d8 <write+0x100>
    90a8:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    90ac:	0421c83a 	sub	r16,zero,r16
    90b0:	14000015 	stw	r16,0(r2)
        return -1;
    90b4:	00bfffc4 	movi	r2,-1
    90b8:	003fe806 	br	905c <_gp+0xffff5ea0>
    90bc:	d0a00917 	ldw	r2,-32732(gp)
    90c0:	10000726 	beq	r2,zero,90e0 <write+0x108>
    90c4:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    90c8:	00c01444 	movi	r3,81
    90cc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    90d0:	00bfffc4 	movi	r2,-1
    90d4:	003fe106 	br	905c <_gp+0xffff5ea0>
    90d8:	d0a0d104 	addi	r2,gp,-31932
    90dc:	003ff306 	br	90ac <_gp+0xffff5ef0>
    90e0:	d0a0d104 	addi	r2,gp,-31932
    90e4:	003ff806 	br	90c8 <_gp+0xffff5f0c>

000090e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    90e8:	deffff04 	addi	sp,sp,-4
    90ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    90f0:	000aaac0 	call	aaac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    90f4:	00800044 	movi	r2,1
    90f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    90fc:	dfc00017 	ldw	ra,0(sp)
    9100:	dec00104 	addi	sp,sp,4
    9104:	f800283a 	ret

00009108 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( HDMI_I2C, hdmi_i2c);
    9108:	01000074 	movhi	r4,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    910c:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( HDMI_I2C, hdmi_i2c);
    9110:	212bf704 	addi	r4,r4,-20516
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9114:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( HDMI_I2C, hdmi_i2c);
    9118:	00093a00 	call	93a0 <alt_avalon_i2c_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    911c:	01000074 	movhi	r4,1
    9120:	212bec04 	addi	r4,r4,-20560
    9124:	d1600504 	addi	r5,gp,-32748
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    9128:	dfc00017 	ldw	ra,0(sp)
    912c:	dec00104 	addi	sp,sp,4
    9130:	000a5ec1 	jmpi	a5ec <alt_dev_llist_insert>

00009134 <alt_avalon_i2c_irq>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9134:	20800317 	ldw	r2,12(r4)
    9138:	10800304 	addi	r2,r2,12
    913c:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    9140:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9144:	20800317 	ldw	r2,12(r4)
    9148:	01400704 	movi	r5,28
    914c:	11400435 	stwio	r5,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    9150:	20c00617 	ldw	r3,24(r4)
    9154:	18000c26 	beq	r3,zero,9188 <alt_avalon_i2c_irq+0x54>
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    9158:	defffe04 	addi	sp,sp,-8
    915c:	dfc00115 	stw	ra,4(sp)
    9160:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9164:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9168:	00bfff84 	movi	r2,-2
    916c:	8084703a 	and	r2,r16,r2
    9170:	1001703a 	wrctl	status,r2
    * interrupt pre-emption.
    */
    if(dev->callback) 
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
    9174:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9178:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
    917c:	dfc00117 	ldw	ra,4(sp)
    9180:	dc000017 	ldw	r16,0(sp)
    9184:	dec00204 	addi	sp,sp,8
    9188:	f800283a 	ret

0000918c <optional_irq_callback>:
{
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
    918c:	22000717 	ldw	r8,28(r4)

   if (irq->irq_busy==2)  /*receive request*/
    9190:	00800084 	movi	r2,2
    9194:	40c00217 	ldw	r3,8(r8)
    9198:	1880221e 	bne	r3,r2,9224 <optional_irq_callback+0x98>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
    919c:	41c00017 	ldw	r7,0(r8)
    91a0:	41800117 	ldw	r6,4(r8)
}

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    91a4:	0005883a 	mov	r2,zero
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    91a8:	20c00317 	ldw	r3,12(r4)
    91ac:	19400737 	ldwio	r5,28(r3)
    91b0:	28000a26 	beq	r5,zero,91dc <optional_irq_callback+0x50>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    91b4:	19400137 	ldwio	r5,4(r3)
    91b8:	3887883a 	add	r3,r7,r2
    91bc:	19400005 	stb	r5,0(r3)
       *bytes_read+=1; 
    91c0:	10800044 	addi	r2,r2,1
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    91c4:	30bff81e 	bne	r6,r2,91a8 <_gp+0xffff5fec>
    91c8:	3000141e 	bne	r6,zero,921c <optional_irq_callback+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    91cc:	20c00317 	ldw	r3,12(r4)
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    91d0:	3005883a 	mov	r2,r6
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    91d4:	19400737 	ldwio	r5,28(r3)
    91d8:	283ff61e 	bne	r5,zero,91b4 <_gp+0xffff5ff8>
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    91dc:	41400117 	ldw	r5,4(r8)
       irq->buffer+=bytes_read;
    91e0:	41800017 	ldw	r6,0(r8)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    91e4:	288bc83a 	sub	r5,r5,r2
       irq->buffer+=bytes_read;
    91e8:	3085883a 	add	r2,r6,r2
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    91ec:	41400115 	stw	r5,4(r8)
       irq->buffer+=bytes_read;
    91f0:	40800015 	stw	r2,0(r8)
       if (irq->size > 0)
    91f4:	28000c26 	beq	r5,zero,9228 <optional_irq_callback+0x9c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    91f8:	00800704 	movi	r2,28
    91fc:	18800435 	stwio	r2,16(r3)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9200:	20c00317 	ldw	r3,12(r4)
    9204:	18c00304 	addi	r3,r3,12
    9208:	18800037 	ldwio	r2,0(r3)
    920c:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    9210:	10800094 	ori	r2,r2,2
    9214:	18800035 	stwio	r2,0(r3)
    9218:	f800283a 	ret
    921c:	20c00317 	ldw	r3,12(r4)
    9220:	003fee06 	br	91dc <_gp+0xffff6020>
    9224:	20c00317 	ldw	r3,12(r4)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    9228:	010000b4 	movhi	r4,2
    922c:	2121a804 	addi	r4,r4,-31072
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9230:	19400504 	addi	r5,r3,20
    9234:	28800037 	ldwio	r2,0(r5)
    9238:	1080004c 	andi	r2,r2,1
    923c:	213fffc4 	addi	r4,r4,-1
    9240:	1000071e 	bne	r2,zero,9260 <optional_irq_callback+0xd4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    9244:	18c00204 	addi	r3,r3,8
    9248:	19000037 	ldwio	r4,0(r3)
    924c:	00bfff84 	movi	r2,-2
    9250:	2084703a 	and	r2,r4,r2
    9254:	18800035 	stwio	r2,0(r3)
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);

    irq->irq_busy=0;
    9258:	40000215 	stw	zero,8(r8)
    925c:	f800283a 	ret
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
    9260:	203ff41e 	bne	r4,zero,9234 <_gp+0xffff6078>
    9264:	003ff706 	br	9244 <_gp+0xffff6088>

00009268 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    9268:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
    926c:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    9270:	10a46304 	addi	r2,r2,-28276
    9274:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
    9278:	21400715 	stw	r5,28(r4)
    dev->control          = control;
    927c:	20000815 	stw	zero,32(r4)
    9280:	f800283a 	ret

00009284 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    9284:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
    9288:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
    928c:	21800815 	stw	r6,32(r4)
    9290:	f800283a 	ret

00009294 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
    9294:	d1600204 	addi	r5,gp,-32760
    9298:	000a6581 	jmpi	a658 <alt_find_dev>

0000929c <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    929c:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
    92a0:	20c00317 	ldw	r3,12(r4)
    92a4:	18800237 	ldwio	r2,8(r3)
   if (enable_status)
    92a8:	1080004c 	andi	r2,r2,1
    92ac:	10000226 	beq	r2,zero,92b8 <alt_avalon_i2c_enable+0x1c>
   {
     return ALT_AVALON_I2C_BUSY;
    92b0:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
    92b4:	f800283a 	ret
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
    92b8:	21000617 	ldw	r4,24(r4)
    92bc:	00800074 	movhi	r2,1
    92c0:	10a46304 	addi	r2,r2,-28276
    92c4:	20800626 	beq	r4,r2,92e0 <alt_avalon_i2c_enable+0x44>
   {
     irq_data->irq_busy=0;
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
    92c8:	18c00204 	addi	r3,r3,8
    92cc:	18800037 	ldwio	r2,0(r3)
    92d0:	10800054 	ori	r2,r2,1
    92d4:	18800035 	stwio	r2,0(r3)
    92d8:	0005883a 	mov	r2,zero
    92dc:	f800283a 	ret
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   {
     irq_data->irq_busy=0;
    92e0:	28000215 	stw	zero,8(r5)
    92e4:	003ff806 	br	92c8 <_gp+0xffff610c>

000092e8 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    92e8:	20800317 	ldw	r2,12(r4)
    92ec:	10800204 	addi	r2,r2,8
    92f0:	11000037 	ldwio	r4,0(r2)
    92f4:	00ffff84 	movi	r3,-2
    92f8:	20c6703a 	and	r3,r4,r3
    92fc:	10c00035 	stwio	r3,0(r2)
    9300:	f800283a 	ret

00009304 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    9304:	20c00d17 	ldw	r3,52(r4)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    9308:	20800317 	ldw	r2,12(r4)
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    930c:	28c00015 	stw	r3,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    9310:	10800237 	ldwio	r2,8(r2)
    9314:	1080008c 	andi	r2,r2,2
    9318:	1005d07a 	srai	r2,r2,1

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    931c:	20c00317 	ldw	r3,12(r4)
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    9320:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    9324:	18c00937 	ldwio	r3,36(r3)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    9328:	20800317 	ldw	r2,12(r4)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    932c:	28c0020d 	sth	r3,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    9330:	10c00837 	ldwio	r3,32(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
    9334:	20800317 	ldw	r2,12(r4)

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    9338:	28c0028d 	sth	r3,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
    933c:	10800a37 	ldwio	r2,40(r2)
    9340:	2880030d 	sth	r2,12(r5)
    9344:	f800283a 	ret

00009348 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    9348:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    934c:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    9350:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    9354:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    9358:	31c00037 	ldwio	r7,0(r6)
    935c:	00ffff44 	movi	r3,-3
    9360:	28800117 	ldw	r2,4(r5)
    9364:	38c6703a 	and	r3,r7,r3
    9368:	1085883a 	add	r2,r2,r2
    936c:	1080008c 	andi	r2,r2,2
    9370:	10c4b03a 	or	r2,r2,r3
    9374:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
    9378:	20800317 	ldw	r2,12(r4)
    937c:	28c0020b 	ldhu	r3,8(r5)
    9380:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
    9384:	20800317 	ldw	r2,12(r4)
    9388:	28c0028b 	ldhu	r3,10(r5)
    938c:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
    9390:	20800317 	ldw	r2,12(r4)
    9394:	28c0030b 	ldhu	r3,12(r5)
    9398:	10c00a35 	stwio	r3,40(r2)
    939c:	f800283a 	ret

000093a0 <alt_avalon_i2c_init>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    93a0:	20800317 	ldw	r2,12(r4)

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
    93a4:	defff904 	addi	sp,sp,-28
    93a8:	dc000515 	stw	r16,20(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    93ac:	10800204 	addi	r2,r2,8

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
    93b0:	2021883a 	mov	r16,r4
    93b4:	dfc00615 	stw	ra,24(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    93b8:	11000037 	ldwio	r4,0(r2)
    93bc:	00ffff84 	movi	r3,-2
    93c0:	20c6703a 	and	r3,r4,r3
    93c4:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    93c8:	80800317 	ldw	r2,12(r16)
    93cc:	10800304 	addi	r2,r2,12
    93d0:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    93d4:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    93d8:	80800317 	ldw	r2,12(r16)
    93dc:	00c00704 	movi	r3,28
    93e0:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
    93e4:	80800317 	ldw	r2,12(r16)
    93e8:	10800204 	addi	r2,r2,8
    93ec:	10c00037 	ldwio	r3,0(r2)
    93f0:	18c00314 	ori	r3,r3,12
    93f4:	10c00035 	stwio	r3,0(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    93f8:	80800317 	ldw	r2,12(r16)
    93fc:	10800204 	addi	r2,r2,8
    9400:	10c00037 	ldwio	r3,0(r2)
    9404:	18c00c14 	ori	r3,r3,48
    9408:	10c00035 	stwio	r3,0(r2)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    940c:	81000c17 	ldw	r4,48(r16)
    9410:	01671014 	movui	r5,40000
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
    9414:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    9418:	d8000115 	stw	zero,4(sp)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    941c:	0008d900 	call	8d90 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    9420:	11bff104 	addi	r6,r2,-60
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    9424:	3006d07a 	srli	r3,r6,1
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    9428:	10800f04 	addi	r2,r2,60
    /* set the bus speed */
    // sjk alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,20000);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
    942c:	d9400104 	addi	r5,sp,4
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    9430:	30c7c83a 	sub	r3,r6,r3
    /* set the bus speed */
    // sjk alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,20000);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
    9434:	8009883a 	mov	r4,r16
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    9438:	d980038d 	sth	r6,14(sp)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    943c:	d8c0040d 	sth	r3,16(sp)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    9440:	d880030d 	sth	r2,12(sp)
    /* set the bus speed */
    // sjk alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,20000);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
    9444:	00093480 	call	9348 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
    9448:	8009883a 	mov	r4,r16
    944c:	d1600204 	addi	r5,gp,-32760
    9450:	000a5ec0 	call	a5ec <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    9454:	81400517 	ldw	r5,20(r16)
    9458:	81000417 	ldw	r4,16(r16)
    945c:	01800074 	movhi	r6,1
    9460:	31a44d04 	addi	r6,r6,-28364
    9464:	d8000015 	stw	zero,0(sp)
    9468:	800f883a 	mov	r7,r16
    946c:	000a6d40 	call	a6d4 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
    9470:	dfc00617 	ldw	ra,24(sp)
    9474:	dc000517 	ldw	r16,20(sp)
    9478:	dec00704 	addi	sp,sp,28
    947c:	f800283a 	ret

00009480 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
    9480:	2880028b 	ldhu	r2,10(r5)
    9484:	1000021e 	bne	r2,zero,9490 <alt_avalon_i2c_master_config_speed_get+0x10>
   {
       return ALT_AVALON_I2C_BAD_ARG;
    9488:	00bfff44 	movi	r2,-3
    948c:	f800283a 	ret
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
    9490:	2940020b 	ldhu	r5,8(r5)
    9494:	283ffc26 	beq	r5,zero,9488 <_gp+0xffff62cc>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    9498:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    949c:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    94a0:	114b883a 	add	r5,r2,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    94a4:	dc000015 	stw	r16,0(sp)
    94a8:	dfc00115 	stw	ra,4(sp)
    94ac:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    94b0:	0008d900 	call	8d90 <__udivsi3>
    94b4:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
    94b8:	0005883a 	mov	r2,zero
}
    94bc:	dfc00117 	ldw	ra,4(sp)
    94c0:	dc000017 	ldw	r16,0(sp)
    94c4:	dec00204 	addi	sp,sp,8
    94c8:	f800283a 	ret

000094cc <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    94cc:	00c001b4 	movhi	r3,6
    94d0:	30bfffc4 	addi	r2,r6,-1
    94d4:	18c69fc4 	addi	r3,r3,6783
    94d8:	1880022e 	bgeu	r3,r2,94e4 <alt_avalon_i2c_master_config_speed_set+0x18>
    {
        return ALT_AVALON_I2C_RANGE;
    94dc:	00bfff04 	movi	r2,-4
    94e0:	f800283a 	ret
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    94e4:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    94e8:	defffd04 	addi	sp,sp,-12
    94ec:	dc400115 	stw	r17,4(sp)
    94f0:	2823883a 	mov	r17,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    94f4:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    94f8:	dc000015 	stw	r16,0(sp)
    94fc:	dfc00215 	stw	ra,8(sp)
    9500:	3021883a 	mov	r16,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    9504:	0008d900 	call	8d90 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    9508:	00c000b4 	movhi	r3,2
    950c:	18e1a804 	addi	r3,r3,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    9510:	11000f04 	addi	r4,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    9514:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    9518:	1c000c36 	bltu	r3,r16,954c <alt_avalon_i2c_master_config_speed_set+0x80>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    951c:	88000115 	stw	zero,4(r17)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    9520:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    9524:	8880028d 	sth	r2,10(r17)
    cfg->scl_hcnt = scl_hcnt;
    9528:	8900020d 	sth	r4,8(r17)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    952c:	10c5c83a 	sub	r2,r2,r3
    9530:	8880030d 	sth	r2,12(r17)
    9534:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
    9538:	dfc00217 	ldw	ra,8(sp)
    953c:	dc400117 	ldw	r17,4(sp)
    9540:	dc000017 	ldw	r16,0(sp)
    9544:	dec00304 	addi	sp,sp,12
    9548:	f800283a 	ret
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    954c:	00c00044 	movi	r3,1
    9550:	88c00115 	stw	r3,4(r17)
    9554:	003ff206 	br	9520 <_gp+0xffff6364>

00009558 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9558:	20800317 	ldw	r2,12(r4)
    955c:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
    9560:	1080004c 	andi	r2,r2,1
    9564:	f800283a 	ret

00009568 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    9568:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    956c:	20c00317 	ldw	r3,12(r4)
    9570:	18800737 	ldwio	r2,28(r3)
    9574:	10000926 	beq	r2,zero,959c <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    9578:	38800017 	ldw	r2,0(r7)
    957c:	2885883a 	add	r2,r5,r2
    9580:	18c00137 	ldwio	r3,4(r3)
    9584:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
    9588:	38800017 	ldw	r2,0(r7)
    958c:	10800044 	addi	r2,r2,1
    9590:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    9594:	11bff51e 	bne	r2,r6,956c <_gp+0xffff63b0>
    9598:	303ff426 	beq	r6,zero,956c <_gp+0xffff63b0>
    959c:	f800283a 	ret

000095a0 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    95a0:	defffb04 	addi	sp,sp,-20
    95a4:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    95a8:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    95ac:	dcc00315 	stw	r19,12(sp)
    95b0:	dc800215 	stw	r18,8(sp)
    95b4:	dc400115 	stw	r17,4(sp)
    95b8:	dfc00415 	stw	ra,16(sp)
    95bc:	2025883a 	mov	r18,r4
    95c0:	2827883a 	mov	r19,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    95c4:	8421a804 	addi	r16,r16,-31072
    95c8:	20c00317 	ldw	r3,12(r4)
    {
      if (timeout<10) alt_busy_sleep(10000);
    95cc:	04400244 	movi	r17,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    95d0:	00000206 	br	95dc <alt_avalon_i2c_rx_read+0x3c>
    95d4:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);
      if (--timeout == 0)
    95d8:	80000826 	beq	r16,zero,95fc <alt_avalon_i2c_rx_read+0x5c>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    95dc:	18800737 	ldwio	r2,28(r3)
    95e0:	1000081e 	bne	r2,zero,9604 <alt_avalon_i2c_rx_read+0x64>
    {
      if (timeout<10) alt_busy_sleep(10000);
    95e4:	8c3ffb36 	bltu	r17,r16,95d4 <_gp+0xffff6418>
    95e8:	0109c404 	movi	r4,10000
    95ec:	000a4a80 	call	a4a8 <alt_busy_sleep>
    95f0:	843fffc4 	addi	r16,r16,-1
    95f4:	90c00317 	ldw	r3,12(r18)
      if (--timeout == 0)
    95f8:	803ff81e 	bne	r16,zero,95dc <_gp+0xffff6420>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
    95fc:	00bfff84 	movi	r2,-2
    9600:	00000106 	br	9608 <alt_avalon_i2c_rx_read+0x68>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    9604:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    9608:	18c00137 	ldwio	r3,4(r3)
    960c:	98c00005 	stb	r3,0(r19)
        
    return status;
}
    9610:	dfc00417 	ldw	ra,16(sp)
    9614:	dcc00317 	ldw	r19,12(sp)
    9618:	dc800217 	ldw	r18,8(sp)
    961c:	dc400117 	ldw	r17,4(sp)
    9620:	dc000017 	ldw	r16,0(sp)
    9624:	dec00504 	addi	sp,sp,20
    9628:	f800283a 	ret

0000962c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    962c:	defff904 	addi	sp,sp,-28
    9630:	dd400515 	stw	r21,20(sp)
    9634:	dd000415 	stw	r20,16(sp)
    9638:	dcc00315 	stw	r19,12(sp)
    963c:	dc800215 	stw	r18,8(sp)
    9640:	dc400115 	stw	r17,4(sp)
    9644:	dc000015 	stw	r16,0(sp)
    9648:	dfc00615 	stw	ra,24(sp)
    964c:	2023883a 	mov	r17,r4
    9650:	2829883a 	mov	r20,r5
    9654:	302b883a 	mov	r21,r6
    9658:	3827883a 	mov	r19,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    965c:	0409c404 	movi	r16,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
    9660:	04800244 	movi	r18,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    9664:	00000206 	br	9670 <alt_avalon_i2c_cmd_write+0x44>
    9668:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);    
      if (--timeout == 0)
    966c:	80000926 	beq	r16,zero,9694 <alt_avalon_i2c_cmd_write+0x68>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    9670:	88c00317 	ldw	r3,12(r17)
    9674:	18800437 	ldwio	r2,16(r3)
    9678:	1080004c 	andi	r2,r2,1
    967c:	1000071e 	bne	r2,zero,969c <alt_avalon_i2c_cmd_write+0x70>
    {
      if (timeout<10) alt_busy_sleep(10000);    
    9680:	943ff936 	bltu	r18,r16,9668 <_gp+0xffff64ac>
    9684:	0109c404 	movi	r4,10000
    9688:	843fffc4 	addi	r16,r16,-1
    968c:	000a4a80 	call	a4a8 <alt_busy_sleep>
      if (--timeout == 0)
    9690:	803ff71e 	bne	r16,zero,9670 <_gp+0xffff64b4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
    9694:	00bfff84 	movi	r2,-2
    9698:	00001106 	br	96e0 <alt_avalon_i2c_cmd_write+0xb4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
    969c:	a8803fcc 	andi	r2,r21,255
    96a0:	1004927a 	slli	r2,r2,9
    96a4:	9cc03fcc 	andi	r19,r19,255
    96a8:	9826923a 	slli	r19,r19,8
    96ac:	a5003fcc 	andi	r20,r20,255
    96b0:	1504b03a 	or	r2,r2,r20
    96b4:	14c4b03a 	or	r2,r2,r19
    96b8:	18800035 	stwio	r2,0(r3)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    96bc:	88c00317 	ldw	r3,12(r17)
    96c0:	18800437 	ldwio	r2,16(r3)
    96c4:	1080010c 	andi	r2,r2,4
    96c8:	10000e1e 	bne	r2,zero,9704 <alt_avalon_i2c_cmd_write+0xd8>
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    96cc:	0005883a 	mov	r2,zero
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
    96d0:	18c00437 	ldwio	r3,16(r3)
    96d4:	18c0020c 	andi	r3,r3,8
    96d8:	18000126 	beq	r3,zero,96e0 <alt_avalon_i2c_cmd_write+0xb4>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    96dc:	00bffe84 	movi	r2,-6
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    
    return status;
}
    96e0:	dfc00617 	ldw	ra,24(sp)
    96e4:	dd400517 	ldw	r21,20(sp)
    96e8:	dd000417 	ldw	r20,16(sp)
    96ec:	dcc00317 	ldw	r19,12(sp)
    96f0:	dc800217 	ldw	r18,8(sp)
    96f4:	dc400117 	ldw	r17,4(sp)
    96f8:	dc000017 	ldw	r16,0(sp)
    96fc:	dec00704 	addi	sp,sp,28
    9700:	f800283a 	ret
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    9704:	00bffec4 	movi	r2,-5
    9708:	003ff106 	br	96d0 <_gp+0xffff6514>

0000970c <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    970c:	21c00d17 	ldw	r7,52(r4)
    9710:	00c00044 	movi	r3,1
    9714:	38c00726 	beq	r7,r3,9734 <alt_avalon_i2c_send_address+0x28>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    9718:	20800917 	ldw	r2,36(r4)
    971c:	000f883a 	mov	r7,zero
    9720:	31803fcc 	andi	r6,r6,255
    9724:	1085883a 	add	r2,r2,r2
    9728:	114ab03a 	or	r5,r2,r5
    972c:	29403fcc 	andi	r5,r5,255
    9730:	000962c1 	jmpi	962c <alt_avalon_i2c_cmd_write>
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    9734:	20800917 	ldw	r2,36(r4)
    9738:	00ffff84 	movi	r3,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    973c:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    9740:	109e0014 	ori	r2,r2,30720
    9744:	1004d1fa 	srli	r2,r2,7
    9748:	000f883a 	mov	r7,zero
    974c:	31803fcc 	andi	r6,r6,255
    9750:	10c4703a 	and	r2,r2,r3
    9754:	114ab03a 	or	r5,r2,r5
    9758:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    975c:	dc000015 	stw	r16,0(sp)
    9760:	dfc00115 	stw	ra,4(sp)
    9764:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    9768:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    976c:	81400903 	ldbu	r5,36(r16)
    9770:	000f883a 	mov	r7,zero
    9774:	000d883a 	mov	r6,zero
    9778:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
    977c:	dfc00117 	ldw	ra,4(sp)
    9780:	dc000017 	ldw	r16,0(sp)
    9784:	dec00204 	addi	sp,sp,8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    9788:	000962c1 	jmpi	962c <alt_avalon_i2c_cmd_write>

0000978c <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
    978c:	20800917 	ldw	r2,36(r4)
    9790:	28800015 	stw	r2,0(r5)
    9794:	f800283a 	ret

00009798 <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
    9798:	21400915 	stw	r5,36(r4)
    979c:	f800283a 	ret

000097a0 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    97a0:	20800317 	ldw	r2,12(r4)
    97a4:	10800437 	ldwio	r2,16(r2)
    97a8:	1080010c 	andi	r2,r2,4
    97ac:	10000226 	beq	r2,zero,97b8 <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    97b0:	00bffec4 	movi	r2,-5
    97b4:	28800015 	stw	r2,0(r5)
    97b8:	f800283a 	ret

000097bc <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
    97bc:	20800317 	ldw	r2,12(r4)
    97c0:	10800437 	ldwio	r2,16(r2)
    97c4:	1080020c 	andi	r2,r2,8
    97c8:	10000226 	beq	r2,zero,97d4 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    97cc:	00bffe84 	movi	r2,-6
    97d0:	28800015 	stw	r2,0(r5)
    97d4:	f800283a 	ret

000097d8 <alt_avalon_i2c_interrupt_transaction_status>:
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    97d8:	defffa04 	addi	sp,sp,-24
    97dc:	dc800215 	stw	r18,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    97e0:	24800717 	ldw	r18,28(r4)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    97e4:	20800317 	ldw	r2,12(r4)
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    97e8:	dfc00515 	stw	ra,20(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    97ec:	91c00117 	ldw	r7,4(r18)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    97f0:	10800304 	addi	r2,r2,12
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    97f4:	dd000415 	stw	r20,16(sp)
    97f8:	dcc00315 	stw	r19,12(sp)
    97fc:	dc400115 	stw	r17,4(sp)
    9800:	dc000015 	stw	r16,0(sp)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9804:	11800037 	ldwio	r6,0(r2)
    9808:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    980c:	30c007cc 	andi	r3,r6,31
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9810:	294007cc 	andi	r5,r5,31
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    9814:	00c6303a 	nor	r3,zero,r3
    9818:	1946703a 	and	r3,r3,r5
    981c:	10c00035 	stwio	r3,0(r2)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    9820:	24000317 	ldw	r16,12(r4)
    9824:	80800437 	ldwio	r2,16(r16)
    9828:	1080010c 	andi	r2,r2,4
    982c:	10000b26 	beq	r2,zero,985c <alt_avalon_i2c_interrupt_transaction_status+0x84>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
    9830:	90800217 	ldw	r2,8(r18)
    9834:	1000121e 	bne	r2,zero,9880 <alt_avalon_i2c_interrupt_transaction_status+0xa8>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    9838:	00bffec4 	movi	r2,-5
        return ALT_AVALON_I2C_BUSY;
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
    983c:	dfc00517 	ldw	ra,20(sp)
    9840:	dd000417 	ldw	r20,16(sp)
    9844:	dcc00317 	ldw	r19,12(sp)
    9848:	dc800217 	ldw	r18,8(sp)
    984c:	dc400117 	ldw	r17,4(sp)
    9850:	dc000017 	ldw	r16,0(sp)
    9854:	dec00604 	addi	sp,sp,24
    9858:	f800283a 	ret
      
      /*return nack error so transaction can be retried*/
      return status;
    }
    
    if (irq_data->irq_busy)
    985c:	90800217 	ldw	r2,8(r18)
    9860:	103ff626 	beq	r2,zero,983c <_gp+0xffff6680>
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9864:	84000304 	addi	r16,r16,12
    9868:	80800037 	ldwio	r2,0(r16)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    986c:	118cb03a 	or	r6,r2,r6
    9870:	318007cc 	andi	r6,r6,31
    9874:	81800035 	stwio	r6,0(r16)
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
    9878:	00bffe44 	movi	r2,-7
    987c:	003fef06 	br	983c <_gp+0xffff6680>
    9880:	2023883a 	mov	r17,r4

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    9884:	0149c404 	movi	r5,10000
    9888:	39000044 	addi	r4,r7,1
    988c:	0008e4c0 	call	8e4c <__mulsi3>
    9890:	1027883a 	mov	r19,r2
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    9894:	05000244 	movi	r20,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9898:	80800537 	ldwio	r2,20(r16)
    989c:	1080004c 	andi	r2,r2,1
    98a0:	1000101e 	bne	r2,zero,98e4 <alt_avalon_i2c_interrupt_transaction_status+0x10c>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    98a4:	00bffec4 	movi	r2,-5
    98a8:	90c00017 	ldw	r3,0(r18)
    98ac:	00000406 	br	98c0 <alt_avalon_i2c_interrupt_transaction_status+0xe8>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    98b0:	81000137 	ldwio	r4,4(r16)
    98b4:	19000005 	stb	r4,0(r3)
    98b8:	8c000317 	ldw	r16,12(r17)
    98bc:	18c00044 	addi	r3,r3,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    98c0:	81000737 	ldwio	r4,28(r16)
    98c4:	203ffa1e 	bne	r4,zero,98b0 <_gp+0xffff66f4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    98c8:	84000204 	addi	r16,r16,8
    98cc:	81000037 	ldwio	r4,0(r16)
    98d0:	00ffff84 	movi	r3,-2
    98d4:	20c6703a 	and	r3,r4,r3
    98d8:	80c00035 	stwio	r3,0(r16)
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
          
        /*abort the transaction */
        irq_data->irq_busy=0;
    98dc:	90000215 	stw	zero,8(r18)
    98e0:	003fd606 	br	983c <_gp+0xffff6680>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    98e4:	a4c0042e 	bgeu	r20,r19,98f8 <alt_avalon_i2c_interrupt_transaction_status+0x120>
              if (--timeout == 0)
    98e8:	9cffffc4 	addi	r19,r19,-1
    98ec:	983fea1e 	bne	r19,zero,9898 <_gp+0xffff66dc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
    98f0:	00bfff84 	movi	r2,-2
    98f4:	003fec06 	br	98a8 <_gp+0xffff66ec>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    98f8:	0109c404 	movi	r4,10000
    98fc:	000a4a80 	call	a4a8 <alt_busy_sleep>
    9900:	8c000317 	ldw	r16,12(r17)
    9904:	003ff806 	br	98e8 <_gp+0xffff672c>

00009908 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    9908:	defff904 	addi	sp,sp,-28
    990c:	dd400515 	stw	r21,20(sp)
    9910:	dfc00615 	stw	ra,24(sp)
    9914:	dd000415 	stw	r20,16(sp)
    9918:	dcc00315 	stw	r19,12(sp)
    991c:	dc800215 	stw	r18,8(sp)
    9920:	dc400115 	stw	r17,4(sp)
    9924:	dc000015 	stw	r16,0(sp)
    9928:	dd400717 	ldw	r21,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    992c:	30003b26 	beq	r6,zero,9a1c <alt_avalon_i2c_master_transmit+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    9930:	3c403fcc 	andi	r17,r7,255
    9934:	3029883a 	mov	r20,r6
    9938:	2025883a 	mov	r18,r4
    993c:	2821883a 	mov	r16,r5
    9940:	88004026 	beq	r17,zero,9a44 <alt_avalon_i2c_master_transmit+0x13c>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    9944:	880d883a 	mov	r6,r17
    9948:	000b883a 	mov	r5,zero
    994c:	9009883a 	mov	r4,r18
    9950:	000970c0 	call	970c <alt_avalon_i2c_send_address>
    9954:	1023883a 	mov	r17,r2
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    9958:	10001826 	beq	r2,zero,99bc <alt_avalon_i2c_master_transmit+0xb4>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    995c:	0149c404 	movi	r5,10000
    9960:	a009883a 	mov	r4,r20
    9964:	0008e4c0 	call	8e4c <__mulsi3>
    9968:	90c00317 	ldw	r3,12(r18)
    996c:	1021883a 	mov	r16,r2
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9970:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9974:	18800537 	ldwio	r2,20(r3)
    9978:	1080004c 	andi	r2,r2,1
    997c:	10000426 	beq	r2,zero,9990 <alt_avalon_i2c_master_transmit+0x88>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9980:	9c00362e 	bgeu	r19,r16,9a5c <alt_avalon_i2c_master_transmit+0x154>
            if (--timeout == 0)
    9984:	843fffc4 	addi	r16,r16,-1
    9988:	803ffa1e 	bne	r16,zero,9974 <_gp+0xffff67b8>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    998c:	047fff84 	movi	r17,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    9990:	18800437 	ldwio	r2,16(r3)
    9994:	1080010c 	andi	r2,r2,4
    9998:	10000126 	beq	r2,zero,99a0 <alt_avalon_i2c_master_transmit+0x98>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    999c:	047ffec4 	movi	r17,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    99a0:	18c00204 	addi	r3,r3,8
    99a4:	19000037 	ldwio	r4,0(r3)
    99a8:	00bfff84 	movi	r2,-2
    99ac:	2084703a 	and	r2,r4,r2
    99b0:	18800035 	stwio	r2,0(r3)
    99b4:	8805883a 	mov	r2,r17
    99b8:	00001906 	br	9a20 <alt_avalon_i2c_master_transmit+0x118>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    99bc:	00800044 	movi	r2,1
    99c0:	15002a2e 	bgeu	r2,r20,9a6c <alt_avalon_i2c_master_transmit+0x164>
    99c4:	a4ffffc4 	addi	r19,r20,-1
    99c8:	84e7883a 	add	r19,r16,r19
    99cc:	00000106 	br	99d4 <alt_avalon_i2c_master_transmit+0xcc>
    99d0:	103fe21e 	bne	r2,zero,995c <_gp+0xffff67a0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    99d4:	81400003 	ldbu	r5,0(r16)
    99d8:	000f883a 	mov	r7,zero
    99dc:	000d883a 	mov	r6,zero
    99e0:	9009883a 	mov	r4,r18
    99e4:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
            
            ++buffer;
    99e8:	84000044 	addi	r16,r16,1
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    99ec:	1023883a 	mov	r17,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    99f0:	84fff71e 	bne	r16,r19,99d0 <_gp+0xffff6814>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    99f4:	103fd91e 	bne	r2,zero,995c <_gp+0xffff67a0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    99f8:	99400003 	ldbu	r5,0(r19)
    99fc:	ad403fcc 	andi	r21,r21,255
    9a00:	a80f883a 	mov	r7,r21
    9a04:	000d883a 	mov	r6,zero
    9a08:	9009883a 	mov	r4,r18
    9a0c:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
    9a10:	1023883a 	mov	r17,r2
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    9a14:	a83fd11e 	bne	r21,zero,995c <_gp+0xffff67a0>
    9a18:	103fd01e 	bne	r2,zero,995c <_gp+0xffff67a0>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    9a1c:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
    9a20:	dfc00617 	ldw	ra,24(sp)
    9a24:	dd400517 	ldw	r21,20(sp)
    9a28:	dd000417 	ldw	r20,16(sp)
    9a2c:	dcc00317 	ldw	r19,12(sp)
    9a30:	dc800217 	ldw	r18,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00704 	addi	sp,sp,28
    9a40:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    9a44:	000929c0 	call	929c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    9a48:	103ff51e 	bne	r2,zero,9a20 <_gp+0xffff6864>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9a4c:	90800317 	ldw	r2,12(r18)
    9a50:	00c00704 	movi	r3,28
    9a54:	10c00435 	stwio	r3,16(r2)
    9a58:	003fba06 	br	9944 <_gp+0xffff6788>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9a5c:	0109c404 	movi	r4,10000
    9a60:	000a4a80 	call	a4a8 <alt_busy_sleep>
    9a64:	90c00317 	ldw	r3,12(r18)
    9a68:	003fc606 	br	9984 <_gp+0xffff67c8>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    9a6c:	8027883a 	mov	r19,r16
    9a70:	003fe106 	br	99f8 <_gp+0xffff683c>

00009a74 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    9a74:	defff804 	addi	sp,sp,-32
    9a78:	dd000415 	stw	r20,16(sp)
    9a7c:	dfc00715 	stw	ra,28(sp)
    9a80:	dd800615 	stw	r22,24(sp)
    9a84:	dd400515 	stw	r21,20(sp)
    9a88:	dcc00315 	stw	r19,12(sp)
    9a8c:	dc800215 	stw	r18,8(sp)
    9a90:	dc400115 	stw	r17,4(sp)
    9a94:	dc000015 	stw	r16,0(sp)
    9a98:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
    9a9c:	30003926 	beq	r6,zero,9b84 <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    9aa0:	20c00617 	ldw	r3,24(r4)
    9aa4:	00800074 	movhi	r2,1
    9aa8:	10a46304 	addi	r2,r2,-28276
    9aac:	2025883a 	mov	r18,r4
    9ab0:	18803626 	beq	r3,r2,9b8c <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    9ab4:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
    9ab8:	dfc00717 	ldw	ra,28(sp)
    9abc:	dd800617 	ldw	r22,24(sp)
    9ac0:	dd400517 	ldw	r21,20(sp)
    9ac4:	dd000417 	ldw	r20,16(sp)
    9ac8:	dcc00317 	ldw	r19,12(sp)
    9acc:	dc800217 	ldw	r18,8(sp)
    9ad0:	dc400117 	ldw	r17,4(sp)
    9ad4:	dc000017 	ldw	r16,0(sp)
    9ad8:	dec00804 	addi	sp,sp,32
    9adc:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    9ae0:	00800044 	movi	r2,1
    9ae4:	1440522e 	bgeu	r2,r17,9c30 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    9ae8:	8dbfffc4 	addi	r22,r17,-1
    9aec:	9dad883a 	add	r22,r19,r22
    9af0:	00000106 	br	9af8 <alt_avalon_i2c_master_transmit_using_interrupts+0x84>
    9af4:	1000351e 	bne	r2,zero,9bcc <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    9af8:	99400003 	ldbu	r5,0(r19)
    9afc:	000f883a 	mov	r7,zero
    9b00:	000d883a 	mov	r6,zero
    9b04:	9009883a 	mov	r4,r18
    9b08:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
            
            ++buffer;
    9b0c:	9cc00044 	addi	r19,r19,1
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    9b10:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    9b14:	b4fff71e 	bne	r22,r19,9af4 <_gp+0xffff6938>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    9b18:	10002c1e 	bne	r2,zero,9bcc <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    9b1c:	b1400003 	ldbu	r5,0(r22)
    9b20:	a5003fcc 	andi	r20,r20,255
    9b24:	a00f883a 	mov	r7,r20
    9b28:	000d883a 	mov	r6,zero
    9b2c:	9009883a 	mov	r4,r18
    9b30:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
    9b34:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    9b38:	1000241e 	bne	r2,zero,9bcc <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
    9b3c:	a0001126 	beq	r20,zero,9b84 <alt_avalon_i2c_master_transmit_using_interrupts+0x110>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9b40:	90800317 	ldw	r2,12(r18)
    9b44:	00c00704 	movi	r3,28
    9b48:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
    9b4c:	90800317 	ldw	r2,12(r18)
    9b50:	10800204 	addi	r2,r2,8
    9b54:	11000037 	ldwio	r4,0(r2)
    9b58:	00fffcc4 	movi	r3,-13
    9b5c:	20c6703a 	and	r3,r4,r3
    9b60:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9b64:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
    9b68:	00800044 	movi	r2,1
    9b6c:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9b70:	18c00304 	addi	r3,r3,12
    9b74:	18800037 	ldwio	r2,0(r3)
    9b78:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    9b7c:	10800054 	ori	r2,r2,1
    9b80:	18800035 	stwio	r2,0(r3)
    9b84:	0005883a 	mov	r2,zero
    9b88:	003fcb06 	br	9ab8 <_gp+0xffff68fc>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    9b8c:	3c003fcc 	andi	r16,r7,255
    9b90:	3023883a 	mov	r17,r6
    9b94:	2827883a 	mov	r19,r5
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    9b98:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    9b9c:	8000051e 	bne	r16,zero,9bb4 <alt_avalon_i2c_master_transmit_using_interrupts+0x140>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    9ba0:	000929c0 	call	929c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    9ba4:	103fc41e 	bne	r2,zero,9ab8 <_gp+0xffff68fc>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9ba8:	90800317 	ldw	r2,12(r18)
    9bac:	00c00704 	movi	r3,28
    9bb0:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    9bb4:	800d883a 	mov	r6,r16
    9bb8:	000b883a 	mov	r5,zero
    9bbc:	9009883a 	mov	r4,r18
    9bc0:	000970c0 	call	970c <alt_avalon_i2c_send_address>
    9bc4:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    9bc8:	103fc526 	beq	r2,zero,9ae0 <_gp+0xffff6924>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    9bcc:	8809883a 	mov	r4,r17
    9bd0:	0149c404 	movi	r5,10000
    9bd4:	0008e4c0 	call	8e4c <__mulsi3>
    9bd8:	90c00317 	ldw	r3,12(r18)
    9bdc:	1023883a 	mov	r17,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
    9be0:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9be4:	18800537 	ldwio	r2,20(r3)
    9be8:	1080004c 	andi	r2,r2,1
    9bec:	1000071e 	bne	r2,zero,9c0c <alt_avalon_i2c_master_transmit_using_interrupts+0x198>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    9bf0:	18c00204 	addi	r3,r3,8
    9bf4:	19000037 	ldwio	r4,0(r3)
    9bf8:	00bfff84 	movi	r2,-2
    9bfc:	2084703a 	and	r2,r4,r2
    9c00:	18800035 	stwio	r2,0(r3)
    9c04:	8005883a 	mov	r2,r16
    9c08:	003fab06 	br	9ab8 <_gp+0xffff68fc>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
    9c0c:	9c40042e 	bgeu	r19,r17,9c20 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
            if (--timeout == 0)
    9c10:	8c7fffc4 	addi	r17,r17,-1
    9c14:	883ff31e 	bne	r17,zero,9be4 <_gp+0xffff6a28>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    9c18:	043fff84 	movi	r16,-2
    9c1c:	003ff406 	br	9bf0 <_gp+0xffff6a34>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
    9c20:	0109c404 	movi	r4,10000
    9c24:	000a4a80 	call	a4a8 <alt_busy_sleep>
    9c28:	90c00317 	ldw	r3,12(r18)
    9c2c:	003ff806 	br	9c10 <_gp+0xffff6a54>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    9c30:	982d883a 	mov	r22,r19
    9c34:	003fb906 	br	9b1c <_gp+0xffff6960>

00009c38 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    9c38:	defff504 	addi	sp,sp,-44
    9c3c:	df000915 	stw	fp,36(sp)
    9c40:	ddc00815 	stw	r23,32(sp)
    9c44:	dd800715 	stw	r22,28(sp)
    9c48:	dd400615 	stw	r21,24(sp)
    9c4c:	dd000515 	stw	r20,20(sp)
    9c50:	dcc00415 	stw	r19,16(sp)
    9c54:	dc800315 	stw	r18,12(sp)
    9c58:	dc400215 	stw	r17,8(sp)
    9c5c:	dc000115 	stw	r16,4(sp)
    9c60:	dfc00a15 	stw	ra,40(sp)
    9c64:	2025883a 	mov	r18,r4
    9c68:	2823883a 	mov	r17,r5
    9c6c:	3021883a 	mov	r16,r6
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9c70:	0709c3c4 	movi	fp,9999
    9c74:	3d403fcc 	andi	r21,r7,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
    9c78:	05000044 	movi	r20,1
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9c7c:	04c00084 	movi	r19,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9c80:	05bfffc4 	movi	r22,-1
    {
      if (retry<10) alt_busy_sleep(10000);
    9c84:	05c00244 	movi	r23,9
      if (use_interrupts)
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    9c88:	000f883a 	mov	r7,zero
    9c8c:	800d883a 	mov	r6,r16
    9c90:	880b883a 	mov	r5,r17
    9c94:	9009883a 	mov	r4,r18
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
    9c98:	a8000a26 	beq	r21,zero,9cc4 <alt_avalon_i2c_master_tx+0x8c>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    9c9c:	dd000015 	stw	r20,0(sp)
    9ca0:	0009a740 	call	9a74 <alt_avalon_i2c_master_transmit_using_interrupts>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9ca4:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9ca8:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9cac:	98c00e36 	bltu	r19,r3,9ce8 <alt_avalon_i2c_master_tx+0xb0>
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9cb0:	e5800d26 	beq	fp,r22,9ce8 <alt_avalon_i2c_master_tx+0xb0>
    {
      if (retry<10) alt_busy_sleep(10000);
    9cb4:	bf3ff436 	bltu	r23,fp,9c88 <_gp+0xffff6acc>
    9cb8:	0109c404 	movi	r4,10000
    9cbc:	000a4a80 	call	a4a8 <alt_busy_sleep>
    9cc0:	003ff106 	br	9c88 <_gp+0xffff6acc>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
    9cc4:	000f883a 	mov	r7,zero
    9cc8:	800d883a 	mov	r6,r16
    9ccc:	880b883a 	mov	r5,r17
    9cd0:	9009883a 	mov	r4,r18
    9cd4:	dd000015 	stw	r20,0(sp)
    9cd8:	00099080 	call	9908 <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9cdc:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9ce0:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9ce4:	98fff22e 	bgeu	r19,r3,9cb0 <_gp+0xffff6af4>
      break;
    }

    return status;
}        
    9ce8:	dfc00a17 	ldw	ra,40(sp)
    9cec:	df000917 	ldw	fp,36(sp)
    9cf0:	ddc00817 	ldw	r23,32(sp)
    9cf4:	dd800717 	ldw	r22,28(sp)
    9cf8:	dd400617 	ldw	r21,24(sp)
    9cfc:	dd000517 	ldw	r20,20(sp)
    9d00:	dcc00417 	ldw	r19,16(sp)
    9d04:	dc800317 	ldw	r18,12(sp)
    9d08:	dc400217 	ldw	r17,8(sp)
    9d0c:	dc000117 	ldw	r16,4(sp)
    9d10:	dec00b04 	addi	sp,sp,44
    9d14:	f800283a 	ret

00009d18 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    9d18:	defff704 	addi	sp,sp,-36
    9d1c:	dd000415 	stw	r20,16(sp)
    9d20:	dfc00815 	stw	ra,32(sp)
    9d24:	ddc00715 	stw	r23,28(sp)
    9d28:	dd800615 	stw	r22,24(sp)
    9d2c:	dd400515 	stw	r21,20(sp)
    9d30:	dcc00315 	stw	r19,12(sp)
    9d34:	dc800215 	stw	r18,8(sp)
    9d38:	dc400115 	stw	r17,4(sp)
    9d3c:	dc000015 	stw	r16,0(sp)
    9d40:	dd000917 	ldw	r20,36(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    9d44:	30003926 	beq	r6,zero,9e2c <alt_avalon_i2c_master_receive+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    9d48:	3c403fcc 	andi	r17,r7,255
    9d4c:	3027883a 	mov	r19,r6
    9d50:	202b883a 	mov	r21,r4
    9d54:	2821883a 	mov	r16,r5
    9d58:	88004026 	beq	r17,zero,9e5c <alt_avalon_i2c_master_receive+0x144>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    9d5c:	880d883a 	mov	r6,r17
    9d60:	01400044 	movi	r5,1
    9d64:	a809883a 	mov	r4,r21
    9d68:	000970c0 	call	970c <alt_avalon_i2c_send_address>
    9d6c:	102d883a 	mov	r22,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
    9d70:	10004026 	beq	r2,zero,9e74 <alt_avalon_i2c_master_receive+0x15c>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
    9d74:	9809883a 	mov	r4,r19
    9d78:	0149c404 	movi	r5,10000
    9d7c:	0008e4c0 	call	8e4c <__mulsi3>
    9d80:	a9000317 	ldw	r4,12(r21)
    9d84:	1021883a 	mov	r16,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9d88:	04400244 	movi	r17,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    9d8c:	20800537 	ldwio	r2,20(r4)
    9d90:	1080004c 	andi	r2,r2,1
    9d94:	10000426 	beq	r2,zero,9da8 <alt_avalon_i2c_master_receive+0x90>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9d98:	8c004f2e 	bgeu	r17,r16,9ed8 <alt_avalon_i2c_master_receive+0x1c0>
            if (--timeout == 0)
    9d9c:	843fffc4 	addi	r16,r16,-1
    9da0:	803ffa1e 	bne	r16,zero,9d8c <_gp+0xffff6bd0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    9da4:	05bfff84 	movi	r22,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    9da8:	20800437 	ldwio	r2,16(r4)
    9dac:	1080010c 	andi	r2,r2,4
    9db0:	10000126 	beq	r2,zero,9db8 <alt_avalon_i2c_master_receive+0xa0>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    9db4:	05bffec4 	movi	r22,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    9db8:	21000204 	addi	r4,r4,8
    9dbc:	20c00037 	ldwio	r3,0(r4)
    9dc0:	00bfff84 	movi	r2,-2
    9dc4:	1884703a 	and	r2,r3,r2
    9dc8:	20800035 	stwio	r2,0(r4)
    9dcc:	b005883a 	mov	r2,r22
    9dd0:	00001706 	br	9e30 <alt_avalon_i2c_master_receive+0x118>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    9dd4:	b03fe71e 	bne	r22,zero,9d74 <_gp+0xffff6bb8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    9dd8:	a5003fcc 	andi	r20,r20,255
    9ddc:	a00f883a 	mov	r7,r20
    9de0:	000d883a 	mov	r6,zero
    9de4:	000b883a 	mov	r5,zero
    9de8:	a809883a 	mov	r4,r21
    9dec:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
    9df0:	102d883a 	mov	r22,r2
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
    9df4:	8cc00b2e 	bgeu	r17,r19,9e24 <alt_avalon_i2c_master_receive+0x10c>
    9df8:	103fde1e 	bne	r2,zero,9d74 <_gp+0xffff6bb8>
    9dfc:	bc63c83a 	sub	r17,r23,r17
    9e00:	8463883a 	add	r17,r16,r17
    9e04:	00000206 	br	9e10 <alt_avalon_i2c_master_receive+0xf8>
    9e08:	84000044 	addi	r16,r16,1
    9e0c:	103fd91e 	bne	r2,zero,9d74 <_gp+0xffff6bb8>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
    9e10:	800b883a 	mov	r5,r16
    9e14:	a809883a 	mov	r4,r21
    9e18:	00095a00 	call	95a0 <alt_avalon_i2c_rx_read>
    9e1c:	102d883a 	mov	r22,r2
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
    9e20:	8c3ff91e 	bne	r17,r16,9e08 <_gp+0xffff6c4c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    9e24:	a03fd31e 	bne	r20,zero,9d74 <_gp+0xffff6bb8>
    9e28:	b03fd21e 	bne	r22,zero,9d74 <_gp+0xffff6bb8>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    9e2c:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
    9e30:	dfc00817 	ldw	ra,32(sp)
    9e34:	ddc00717 	ldw	r23,28(sp)
    9e38:	dd800617 	ldw	r22,24(sp)
    9e3c:	dd400517 	ldw	r21,20(sp)
    9e40:	dd000417 	ldw	r20,16(sp)
    9e44:	dcc00317 	ldw	r19,12(sp)
    9e48:	dc800217 	ldw	r18,8(sp)
    9e4c:	dc400117 	ldw	r17,4(sp)
    9e50:	dc000017 	ldw	r16,0(sp)
    9e54:	dec00904 	addi	sp,sp,36
    9e58:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    9e5c:	000929c0 	call	929c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    9e60:	103ff31e 	bne	r2,zero,9e30 <_gp+0xffff6c74>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9e64:	a8800317 	ldw	r2,12(r21)
    9e68:	00c00704 	movi	r3,28
    9e6c:	10c00435 	stwio	r3,16(r2)
    9e70:	003fba06 	br	9d5c <_gp+0xffff6ba0>
    9e74:	9cbfffc4 	addi	r18,r19,-1
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    9e78:	002f883a 	mov	r23,zero
    9e7c:	0023883a 	mov	r17,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    9e80:	bcbfd426 	beq	r23,r18,9dd4 <_gp+0xffff6c18>
    9e84:	b03fbb1e 	bne	r22,zero,9d74 <_gp+0xffff6bb8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    9e88:	000f883a 	mov	r7,zero
    9e8c:	000d883a 	mov	r6,zero
    9e90:	000b883a 	mov	r5,zero
    9e94:	a809883a 	mov	r4,r21
    9e98:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
    9e9c:	102d883a 	mov	r22,r2
            bytes_written++;
    9ea0:	bdc00044 	addi	r23,r23,1
            if (status == ALT_AVALON_I2C_SUCCESS)
    9ea4:	103ff61e 	bne	r2,zero,9e80 <_gp+0xffff6cc4>
    9ea8:	8007883a 	mov	r3,r16
    9eac:	00000306 	br	9ebc <alt_avalon_i2c_master_receive+0x1a4>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    9eb0:	21000137 	ldwio	r4,4(r4)
    9eb4:	19000005 	stb	r4,0(r3)
    9eb8:	18c00044 	addi	r3,r3,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    9ebc:	a9000317 	ldw	r4,12(r21)
    9ec0:	1c05c83a 	sub	r2,r3,r16
    9ec4:	21400737 	ldwio	r5,28(r4)
    9ec8:	283ff91e 	bne	r5,zero,9eb0 <_gp+0xffff6cf4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
            if (status == ALT_AVALON_I2C_SUCCESS)
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
               buffer+=temp_bytes_read;
    9ecc:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
    9ed0:	88a3883a 	add	r17,r17,r2
    9ed4:	003fea06 	br	9e80 <_gp+0xffff6cc4>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    9ed8:	0109c404 	movi	r4,10000
    9edc:	000a4a80 	call	a4a8 <alt_busy_sleep>
    9ee0:	a9000317 	ldw	r4,12(r21)
    9ee4:	003fad06 	br	9d9c <_gp+0xffff6be0>

00009ee8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    9ee8:	defff704 	addi	sp,sp,-36
    9eec:	dd000415 	stw	r20,16(sp)
    9ef0:	dfc00815 	stw	ra,32(sp)
    9ef4:	ddc00715 	stw	r23,28(sp)
    9ef8:	dd800615 	stw	r22,24(sp)
    9efc:	dd400515 	stw	r21,20(sp)
    9f00:	dcc00315 	stw	r19,12(sp)
    9f04:	dc800215 	stw	r18,8(sp)
    9f08:	dc400115 	stw	r17,4(sp)
    9f0c:	dc000015 	stw	r16,0(sp)
    9f10:	dd000917 	ldw	r20,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
    9f14:	30003a26 	beq	r6,zero,a000 <alt_avalon_i2c_master_receive_using_interrupts+0x118>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    9f18:	22000617 	ldw	r8,24(r4)
    9f1c:	00c00074 	movhi	r3,1
    9f20:	18e46304 	addi	r3,r3,-28276
    9f24:	40c03826 	beq	r8,r3,a008 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    9f28:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
    9f2c:	dfc00817 	ldw	ra,32(sp)
    9f30:	ddc00717 	ldw	r23,28(sp)
    9f34:	dd800617 	ldw	r22,24(sp)
    9f38:	dd400517 	ldw	r21,20(sp)
    9f3c:	dd000417 	ldw	r20,16(sp)
    9f40:	dcc00317 	ldw	r19,12(sp)
    9f44:	dc800217 	ldw	r18,8(sp)
    9f48:	dc400117 	ldw	r17,4(sp)
    9f4c:	dc000017 	ldw	r16,0(sp)
    9f50:	dec00904 	addi	sp,sp,36
    9f54:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    9f58:	8dffffc4 	addi	r23,r17,-1
    9f5c:	002d883a 	mov	r22,zero
    9f60:	b800021e 	bne	r23,zero,9f6c <alt_avalon_i2c_master_receive_using_interrupts+0x84>
    9f64:	00000a06 	br	9f90 <alt_avalon_i2c_master_receive_using_interrupts+0xa8>
    9f68:	1000381e 	bne	r2,zero,a04c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    9f6c:	000f883a 	mov	r7,zero
    9f70:	000d883a 	mov	r6,zero
    9f74:	000b883a 	mov	r5,zero
    9f78:	9009883a 	mov	r4,r18
    9f7c:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
            bytes_written++;
    9f80:	b5800044 	addi	r22,r22,1

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    9f84:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    9f88:	bdbff71e 	bne	r23,r22,9f68 <_gp+0xffff6dac>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    9f8c:	10002f1e 	bne	r2,zero,a04c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    9f90:	a5003fcc 	andi	r20,r20,255
    9f94:	a00f883a 	mov	r7,r20
    9f98:	000d883a 	mov	r6,zero
    9f9c:	000b883a 	mov	r5,zero
    9fa0:	9009883a 	mov	r4,r18
    9fa4:	000962c0 	call	962c <alt_avalon_i2c_cmd_write>
    9fa8:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    9fac:	1000271e 	bne	r2,zero,a04c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
    9fb0:	a0001326 	beq	r20,zero,a000 <alt_avalon_i2c_master_receive_using_interrupts+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9fb4:	90800317 	ldw	r2,12(r18)
    9fb8:	00c00704 	movi	r3,28
    9fbc:	10c00435 	stwio	r3,16(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    9fc0:	90800317 	ldw	r2,12(r18)
    9fc4:	10800204 	addi	r2,r2,8
    9fc8:	11000037 	ldwio	r4,0(r2)
    9fcc:	00fff3c4 	movi	r3,-49
    9fd0:	20c6703a 	and	r3,r4,r3
    9fd4:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9fd8:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
    9fdc:	00800084 	movi	r2,2
    9fe0:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9fe4:	18c00304 	addi	r3,r3,12
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
         
         irq_data->buffer = buffer;
    9fe8:	acc00015 	stw	r19,0(r21)
         irq_data->size = size;
    9fec:	ac400115 	stw	r17,4(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    9ff0:	18800037 	ldwio	r2,0(r3)
    9ff4:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    9ff8:	10800094 	ori	r2,r2,2
    9ffc:	18800035 	stwio	r2,0(r3)
    a000:	0005883a 	mov	r2,zero
    a004:	003fc906 	br	9f2c <_gp+0xffff6d70>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    a008:	3c003fcc 	andi	r16,r7,255
    a00c:	2827883a 	mov	r19,r5
    a010:	2025883a 	mov	r18,r4
    a014:	3023883a 	mov	r17,r6
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    a018:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    a01c:	8000051e 	bne	r16,zero,a034 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    a020:	000929c0 	call	929c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    a024:	103fc11e 	bne	r2,zero,9f2c <_gp+0xffff6d70>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    a028:	90800317 	ldw	r2,12(r18)
    a02c:	00c00704 	movi	r3,28
    a030:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    a034:	800d883a 	mov	r6,r16
    a038:	01400044 	movi	r5,1
    a03c:	9009883a 	mov	r4,r18
    a040:	000970c0 	call	970c <alt_avalon_i2c_send_address>
    a044:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
    a048:	103fc326 	beq	r2,zero,9f58 <_gp+0xffff6d9c>
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
    a04c:	8809883a 	mov	r4,r17
    a050:	0149c404 	movi	r5,10000
    a054:	0008e4c0 	call	8e4c <__mulsi3>
    a058:	90c00317 	ldw	r3,12(r18)
    a05c:	1023883a 	mov	r17,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    a060:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    a064:	18800537 	ldwio	r2,20(r3)
    a068:	1080004c 	andi	r2,r2,1
    a06c:	1000071e 	bne	r2,zero,a08c <alt_avalon_i2c_master_receive_using_interrupts+0x1a4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    a070:	18c00204 	addi	r3,r3,8
    a074:	19000037 	ldwio	r4,0(r3)
    a078:	00bfff84 	movi	r2,-2
    a07c:	2084703a 	and	r2,r4,r2
    a080:	18800035 	stwio	r2,0(r3)
    a084:	8005883a 	mov	r2,r16
    a088:	003fa806 	br	9f2c <_gp+0xffff6d70>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    a08c:	9c40042e 	bgeu	r19,r17,a0a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1b8>
            if (--timeout == 0)
    a090:	8c7fffc4 	addi	r17,r17,-1
    a094:	883ff31e 	bne	r17,zero,a064 <_gp+0xffff6ea8>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    a098:	043fff84 	movi	r16,-2
    a09c:	003ff406 	br	a070 <_gp+0xffff6eb4>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    a0a0:	0109c404 	movi	r4,10000
    a0a4:	000a4a80 	call	a4a8 <alt_busy_sleep>
    a0a8:	90c00317 	ldw	r3,12(r18)
    a0ac:	003ff806 	br	a090 <_gp+0xffff6ed4>

0000a0b0 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    a0b0:	defff604 	addi	sp,sp,-40
    a0b4:	ddc00815 	stw	r23,32(sp)
    a0b8:	dd800715 	stw	r22,28(sp)
    a0bc:	dd400615 	stw	r21,24(sp)
    a0c0:	dd000515 	stw	r20,20(sp)
    a0c4:	dcc00415 	stw	r19,16(sp)
    a0c8:	dc800315 	stw	r18,12(sp)
    a0cc:	dc400215 	stw	r17,8(sp)
    a0d0:	dc000115 	stw	r16,4(sp)
    a0d4:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    a0d8:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    a0dc:	2023883a 	mov	r17,r4
    a0e0:	2825883a 	mov	r18,r5
    a0e4:	3027883a 	mov	r19,r6
    a0e8:	0409c3c4 	movi	r16,9999
    if (use_interrupts) 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    a0ec:	05400044 	movi	r21,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a0f0:	05000084 	movi	r20,2
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
    a0f4:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    a0f8:	05c00244 	movi	r23,9
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    a0fc:	38001026 	beq	r7,zero,a140 <alt_avalon_i2c_master_rx+0x90>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    a100:	000f883a 	mov	r7,zero
    a104:	980d883a 	mov	r6,r19
    a108:	900b883a 	mov	r5,r18
    a10c:	8809883a 	mov	r4,r17
    a110:	dd400015 	stw	r21,0(sp)
    a114:	0009ee80 	call	9ee8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a118:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
    a11c:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a120:	a0c01336 	bltu	r20,r3,a170 <alt_avalon_i2c_master_rx+0xc0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
    a124:	85801226 	beq	r16,r22,a170 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
    a128:	bc3ff536 	bltu	r23,r16,a100 <_gp+0xffff6f44>
    a12c:	0109c404 	movi	r4,10000
    a130:	000a4a80 	call	a4a8 <alt_busy_sleep>
    a134:	003ff206 	br	a100 <_gp+0xffff6f44>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    a138:	0109c404 	movi	r4,10000
    a13c:	000a4a80 	call	a4a8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    a140:	000f883a 	mov	r7,zero
    a144:	980d883a 	mov	r6,r19
    a148:	900b883a 	mov	r5,r18
    a14c:	8809883a 	mov	r4,r17
    a150:	dd400015 	stw	r21,0(sp)
    a154:	0009d180 	call	9d18 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a158:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else
    {
      while (retry--) 
    a15c:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a160:	a0c00336 	bltu	r20,r3,a170 <alt_avalon_i2c_master_rx+0xc0>
        break;
      }
    }
    else
    {
      while (retry--) 
    a164:	85800226 	beq	r16,r22,a170 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
    a168:	bc3ff536 	bltu	r23,r16,a140 <_gp+0xffff6f84>
    a16c:	003ff206 	br	a138 <_gp+0xffff6f7c>
        break;
      }
    }
    
    return status;
}        
    a170:	dfc00917 	ldw	ra,36(sp)
    a174:	ddc00817 	ldw	r23,32(sp)
    a178:	dd800717 	ldw	r22,28(sp)
    a17c:	dd400617 	ldw	r21,24(sp)
    a180:	dd000517 	ldw	r20,20(sp)
    a184:	dcc00417 	ldw	r19,16(sp)
    a188:	dc800317 	ldw	r18,12(sp)
    a18c:	dc400217 	ldw	r17,8(sp)
    a190:	dc000117 	ldw	r16,4(sp)
    a194:	dec00a04 	addi	sp,sp,40
    a198:	f800283a 	ret

0000a19c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    a19c:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    a1a0:	d8800c03 	ldbu	r2,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    a1a4:	df000915 	stw	fp,36(sp)
    a1a8:	ddc00815 	stw	r23,32(sp)
    a1ac:	dd800715 	stw	r22,28(sp)
    a1b0:	dd400615 	stw	r21,24(sp)
    a1b4:	dd000515 	stw	r20,20(sp)
    a1b8:	dcc00415 	stw	r19,16(sp)
    a1bc:	dc800315 	stw	r18,12(sp)
    a1c0:	dc400215 	stw	r17,8(sp)
    a1c4:	dc000115 	stw	r16,4(sp)
    a1c8:	dfc00a15 	stw	ra,40(sp)
    a1cc:	2021883a 	mov	r16,r4
    a1d0:	2823883a 	mov	r17,r5
    a1d4:	3025883a 	mov	r18,r6
    a1d8:	382d883a 	mov	r22,r7
    a1dc:	0709c3c4 	movi	fp,9999
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a1e0:	04c00084 	movi	r19,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    a1e4:	05c00044 	movi	r23,1
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
    a1e8:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    a1ec:	05400244 	movi	r21,9
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    a1f0:	10001826 	beq	r2,zero,a254 <alt_avalon_i2c_master_tx_rx+0xb8>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    a1f4:	000f883a 	mov	r7,zero
    a1f8:	900d883a 	mov	r6,r18
    a1fc:	880b883a 	mov	r5,r17
    a200:	8009883a 	mov	r4,r16
    a204:	d8000015 	stw	zero,0(sp)
    a208:	0009a740 	call	9a74 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a20c:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
    a210:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a214:	98c01936 	bltu	r19,r3,a27c <alt_avalon_i2c_master_tx_rx+0xe0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
    a218:	e5002026 	beq	fp,r20,a29c <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
    a21c:	af3ff536 	bltu	r21,fp,a1f4 <_gp+0xffff7038>
    a220:	0109c404 	movi	r4,10000
    a224:	000a4a80 	call	a4a8 <alt_busy_sleep>
    a228:	003ff206 	br	a1f4 <_gp+0xffff7038>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    a22c:	d9800b17 	ldw	r6,44(sp)
    a230:	01c00044 	movi	r7,1
    a234:	b00b883a 	mov	r5,r22
    a238:	8009883a 	mov	r4,r16
    a23c:	ddc00015 	stw	r23,0(sp)
    a240:	0009d180 	call	9d18 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a244:	10c001c4 	addi	r3,r2,7
    a248:	98c01436 	bltu	r19,r3,a29c <alt_avalon_i2c_master_tx_rx+0x100>
        break;
      }
    }
    else 
    {
      while (retry--) 
    a24c:	e5001326 	beq	fp,r20,a29c <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
    a250:	af001e2e 	bgeu	r21,fp,a2cc <alt_avalon_i2c_master_tx_rx+0x130>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    a254:	000f883a 	mov	r7,zero
    a258:	900d883a 	mov	r6,r18
    a25c:	880b883a 	mov	r5,r17
    a260:	8009883a 	mov	r4,r16
    a264:	d8000015 	stw	zero,0(sp)
    a268:	00099080 	call	9908 <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a26c:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else 
    {
      while (retry--) 
    a270:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a274:	98fff52e 	bgeu	r19,r3,a24c <_gp+0xffff7090>
    a278:	003fec06 	br	a22c <_gp+0xffff7070>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    a27c:	d9800b17 	ldw	r6,44(sp)
    a280:	01c00044 	movi	r7,1
    a284:	b00b883a 	mov	r5,r22
    a288:	8009883a 	mov	r4,r16
    a28c:	ddc00015 	stw	r23,0(sp)
    a290:	0009ee80 	call	9ee8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    a294:	10c001c4 	addi	r3,r2,7
    a298:	98ffdf2e 	bgeu	r19,r3,a218 <_gp+0xffff705c>
        break;
      }
    }
    
    return status;
}                                       
    a29c:	dfc00a17 	ldw	ra,40(sp)
    a2a0:	df000917 	ldw	fp,36(sp)
    a2a4:	ddc00817 	ldw	r23,32(sp)
    a2a8:	dd800717 	ldw	r22,28(sp)
    a2ac:	dd400617 	ldw	r21,24(sp)
    a2b0:	dd000517 	ldw	r20,20(sp)
    a2b4:	dcc00417 	ldw	r19,16(sp)
    a2b8:	dc800317 	ldw	r18,12(sp)
    a2bc:	dc400217 	ldw	r17,8(sp)
    a2c0:	dc000117 	ldw	r16,4(sp)
    a2c4:	dec00b04 	addi	sp,sp,44
    a2c8:	f800283a 	ret
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    a2cc:	0109c404 	movi	r4,10000
    a2d0:	000a4a80 	call	a4a8 <alt_busy_sleep>
    a2d4:	003fdf06 	br	a254 <_gp+0xffff7098>

0000a2d8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
    a2d8:	20c00317 	ldw	r3,12(r4)
    a2dc:	19000437 	ldwio	r4,16(r3)
    a2e0:	18800337 	ldwio	r2,12(r3)
    a2e4:	2084703a 	and	r2,r4,r2
    a2e8:	28800015 	stw	r2,0(r5)
    a2ec:	f800283a 	ret

0000a2f0 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
    a2f0:	20800317 	ldw	r2,12(r4)
    a2f4:	10800437 	ldwio	r2,16(r2)
    a2f8:	28800015 	stw	r2,0(r5)
    a2fc:	f800283a 	ret

0000a300 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    a300:	20800317 	ldw	r2,12(r4)
    a304:	11400435 	stwio	r5,16(r2)
    a308:	f800283a 	ret

0000a30c <alt_avalon_i2c_int_disable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    a30c:	20800317 	ldw	r2,12(r4)
    a310:	10800304 	addi	r2,r2,12
    a314:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    a318:	014a303a 	nor	r5,zero,r5
    a31c:	294007cc 	andi	r5,r5,31
    a320:	28ca703a 	and	r5,r5,r3
    a324:	11400035 	stwio	r5,0(r2)
    a328:	f800283a 	ret

0000a32c <alt_avalon_i2c_int_enable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    a32c:	20c00317 	ldw	r3,12(r4)
    a330:	18c00304 	addi	r3,r3,12
    a334:	18800037 	ldwio	r2,0(r3)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    a338:	114ab03a 	or	r5,r2,r5
    a33c:	294007cc 	andi	r5,r5,31
    a340:	19400035 	stwio	r5,0(r3)
    a344:	f800283a 	ret

0000a348 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    a348:	20800317 	ldw	r2,12(r4)
    a34c:	10800337 	ldwio	r2,12(r2)
    a350:	108007cc 	andi	r2,r2,31
    a354:	28800015 	stw	r2,0(r5)
    a358:	f800283a 	ret

0000a35c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
    a35c:	20800317 	ldw	r2,12(r4)
    a360:	10800237 	ldwio	r2,8(r2)
    a364:	10800c0c 	andi	r2,r2,48
    a368:	1005d13a 	srai	r2,r2,4
    a36c:	28800015 	stw	r2,0(r5)
    a370:	f800283a 	ret

0000a374 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    a374:	20c00317 	ldw	r3,12(r4)
    a378:	18c00204 	addi	r3,r3,8
    a37c:	19000037 	ldwio	r4,0(r3)
    a380:	00bff3c4 	movi	r2,-49
    a384:	280a913a 	slli	r5,r5,4
    a388:	2084703a 	and	r2,r4,r2
    a38c:	29400c0c 	andi	r5,r5,48
    a390:	288ab03a 	or	r5,r5,r2
    a394:	19400035 	stwio	r5,0(r3)
    a398:	f800283a 	ret

0000a39c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
    a39c:	20800317 	ldw	r2,12(r4)
    a3a0:	10800237 	ldwio	r2,8(r2)
    a3a4:	1080030c 	andi	r2,r2,12
    a3a8:	1005d0ba 	srai	r2,r2,2
    a3ac:	28800015 	stw	r2,0(r5)
    a3b0:	f800283a 	ret

0000a3b4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
    a3b4:	20c00317 	ldw	r3,12(r4)
    a3b8:	18c00204 	addi	r3,r3,8
    a3bc:	19000037 	ldwio	r4,0(r3)
    a3c0:	00bffcc4 	movi	r2,-13
    a3c4:	294b883a 	add	r5,r5,r5
    a3c8:	294b883a 	add	r5,r5,r5
    a3cc:	2084703a 	and	r2,r4,r2
    a3d0:	2940030c 	andi	r5,r5,12
    a3d4:	288ab03a 	or	r5,r5,r2
    a3d8:	19400035 	stwio	r5,0(r3)
    a3dc:	f800283a 	ret

0000a3e0 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a3e0:	20800017 	ldw	r2,0(r4)
    a3e4:	21c00217 	ldw	r7,8(r4)
    a3e8:	11000a04 	addi	r4,r2,40
    a3ec:	000a4001 	jmpi	a400 <altera_avalon_jtag_uart_read>

0000a3f0 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a3f0:	20800017 	ldw	r2,0(r4)
    a3f4:	21c00217 	ldw	r7,8(r4)
    a3f8:	11000a04 	addi	r4,r2,40
    a3fc:	000a4741 	jmpi	a474 <altera_avalon_jtag_uart_write>

0000a400 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
    a400:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    a404:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a408:	2980162e 	bgeu	r5,r6,a464 <altera_avalon_jtag_uart_read+0x64>
    a40c:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    a410:	3a90000c 	andi	r10,r7,16384
    a414:	00000306 	br	a424 <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a418:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a41c:	1180092e 	bgeu	r2,r6,a444 <altera_avalon_jtag_uart_read+0x44>
    a420:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a424:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a428:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a42c:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a430:	403ff91e 	bne	r8,zero,a418 <_gp+0xffff725c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
    a434:	28c0061e 	bne	r5,r3,a450 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
    a438:	5000081e 	bne	r10,zero,a45c <altera_avalon_jtag_uart_read+0x5c>
    a43c:	2805883a 	mov	r2,r5
    a440:	003ff706 	br	a420 <_gp+0xffff7264>
      break;   
    
  }

  if (ptr != buffer)
    a444:	28800726 	beq	r5,r2,a464 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
    a448:	1145c83a 	sub	r2,r2,r5
    a44c:	f800283a 	ret
    a450:	1805883a 	mov	r2,r3
    a454:	1145c83a 	sub	r2,r2,r5
    a458:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    a45c:	00bffd44 	movi	r2,-11
    a460:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    a464:	39d0000c 	andi	r7,r7,16384
    a468:	383ffc1e 	bne	r7,zero,a45c <_gp+0xffff72a0>
    return -EWOULDBLOCK;
  else
    return -EIO;
    a46c:	00bffec4 	movi	r2,-5
}
    a470:	f800283a 	ret

0000a474 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    a474:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a478:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    a47c:	298d883a 	add	r6,r5,r6
    a480:	39000104 	addi	r4,r7,4

  while (ptr < end)
    a484:	2980072e 	bgeu	r5,r6,a4a4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a488:	20c00037 	ldwio	r3,0(r4)
    a48c:	18ffffec 	andhi	r3,r3,65535
    a490:	183ffd26 	beq	r3,zero,a488 <_gp+0xffff72cc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a494:	28c00007 	ldb	r3,0(r5)
    a498:	38c00035 	stwio	r3,0(r7)
    a49c:	29400044 	addi	r5,r5,1
    a4a0:	003ff806 	br	a484 <_gp+0xffff72c8>

  return count;
}
    a4a4:	f800283a 	ret

0000a4a8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a4a8:	01440034 	movhi	r5,4096
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    a4ac:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a4b0:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    a4b4:	dc000015 	stw	r16,0(sp)
    a4b8:	dfc00115 	stw	ra,4(sp)
    a4bc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a4c0:	0008d900 	call	8d90 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    a4c4:	10001226 	beq	r2,zero,a510 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a4c8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a4cc:	013c0034 	movhi	r4,61440
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a4d0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a4d4:	21000044 	addi	r4,r4,1
    a4d8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a4dc:	297fffc4 	addi	r5,r5,-1
    a4e0:	283ffe1e 	bne	r5,zero,a4dc <_gp+0xffff7320>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    a4e4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a4e8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    a4ec:	18bffb16 	blt	r3,r2,a4dc <_gp+0xffff7320>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a4f0:	802090fa 	slli	r16,r16,3
    a4f4:	843fffc4 	addi	r16,r16,-1
    a4f8:	803ffe1e 	bne	r16,zero,a4f4 <_gp+0xffff7338>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    a4fc:	0005883a 	mov	r2,zero
    a500:	dfc00117 	ldw	ra,4(sp)
    a504:	dc000017 	ldw	r16,0(sp)
    a508:	dec00204 	addi	sp,sp,8
    a50c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a510:	802090fa 	slli	r16,r16,3
    a514:	843fffc4 	addi	r16,r16,-1
    a518:	043ffe16 	blt	zero,r16,a514 <_gp+0xffff7358>
    a51c:	003ff706 	br	a4fc <_gp+0xffff7340>

0000a520 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a520:	defffd04 	addi	sp,sp,-12
    a524:	dfc00215 	stw	ra,8(sp)
    a528:	dc400115 	stw	r17,4(sp)
    a52c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a530:	20002016 	blt	r4,zero,a5b4 <close+0x94>
    a534:	01400304 	movi	r5,12
    a538:	2021883a 	mov	r16,r4
    a53c:	0008e4c0 	call	8e4c <__mulsi3>
    a540:	01000074 	movhi	r4,1
    a544:	212c0504 	addi	r4,r4,-20460
    a548:	2089883a 	add	r4,r4,r2

  if (fd)
    a54c:	20001926 	beq	r4,zero,a5b4 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a550:	20800017 	ldw	r2,0(r4)
    a554:	10800417 	ldw	r2,16(r2)
    a558:	10000b26 	beq	r2,zero,a588 <close+0x68>
    a55c:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a560:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a564:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a568:	000aa500 	call	aa50 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    a56c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    a570:	88000916 	blt	r17,zero,a598 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    a574:	dfc00217 	ldw	ra,8(sp)
    a578:	dc400117 	ldw	r17,4(sp)
    a57c:	dc000017 	ldw	r16,0(sp)
    a580:	dec00304 	addi	sp,sp,12
    a584:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a588:	8009883a 	mov	r4,r16
    a58c:	000aa500 	call	aa50 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    a590:	0005883a 	mov	r2,zero
    a594:	003ff706 	br	a574 <_gp+0xffff73b8>
    a598:	d0a00917 	ldw	r2,-32732(gp)
    a59c:	10000c26 	beq	r2,zero,a5d0 <close+0xb0>
    a5a0:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    a5a4:	0463c83a 	sub	r17,zero,r17
    a5a8:	14400015 	stw	r17,0(r2)
      return -1;
    a5ac:	00bfffc4 	movi	r2,-1
    a5b0:	003ff006 	br	a574 <_gp+0xffff73b8>
    a5b4:	d0a00917 	ldw	r2,-32732(gp)
    a5b8:	10000726 	beq	r2,zero,a5d8 <close+0xb8>
    a5bc:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a5c0:	00c01444 	movi	r3,81
    a5c4:	10c00015 	stw	r3,0(r2)
    return -1;
    a5c8:	00bfffc4 	movi	r2,-1
    a5cc:	003fe906 	br	a574 <_gp+0xffff73b8>
    a5d0:	d0a0d104 	addi	r2,gp,-31932
    a5d4:	003ff306 	br	a5a4 <_gp+0xffff73e8>
    a5d8:	d0a0d104 	addi	r2,gp,-31932
    a5dc:	003ff806 	br	a5c0 <_gp+0xffff7404>

0000a5e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a5e0:	f800283a 	ret

0000a5e4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    a5e4:	3005883a 	mov	r2,r6
    a5e8:	f800283a 	ret

0000a5ec <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a5ec:	20000a26 	beq	r4,zero,a618 <alt_dev_llist_insert+0x2c>
    a5f0:	20800217 	ldw	r2,8(r4)
    a5f4:	10000826 	beq	r2,zero,a618 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    a5f8:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a5fc:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    a600:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    a604:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    a608:	28c00017 	ldw	r3,0(r5)
    a60c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    a610:	29000015 	stw	r4,0(r5)
    a614:	f800283a 	ret
    a618:	d0a00917 	ldw	r2,-32732(gp)
    a61c:	10000926 	beq	r2,zero,a644 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a620:	deffff04 	addi	sp,sp,-4
    a624:	dfc00015 	stw	ra,0(sp)
    a628:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    a62c:	00c00584 	movi	r3,22
    a630:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    a634:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    a638:	dfc00017 	ldw	ra,0(sp)
    a63c:	dec00104 	addi	sp,sp,4
    a640:	f800283a 	ret
    a644:	d0a0d104 	addi	r2,gp,-31932
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    a648:	00c00584 	movi	r3,22
    a64c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    a650:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    a654:	f800283a 	ret

0000a658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a658:	defffb04 	addi	sp,sp,-20
    a65c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    a660:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a664:	dc400115 	stw	r17,4(sp)
    a668:	2823883a 	mov	r17,r5
    a66c:	dcc00315 	stw	r19,12(sp)
    a670:	dfc00415 	stw	ra,16(sp)
    a674:	dc800215 	stw	r18,8(sp)
    a678:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    a67c:	00085b80 	call	85b8 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a680:	8c000b26 	beq	r17,r16,a6b0 <alt_find_dev+0x58>
    a684:	14800044 	addi	r18,r2,1
    a688:	00000206 	br	a694 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    a68c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a690:	8c000726 	beq	r17,r16,a6b0 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a694:	81000217 	ldw	r4,8(r16)
    a698:	900d883a 	mov	r6,r18
    a69c:	980b883a 	mov	r5,r19
    a6a0:	000ac7c0 	call	ac7c <memcmp>
    a6a4:	103ff91e 	bne	r2,zero,a68c <_gp+0xffff74d0>
    a6a8:	8005883a 	mov	r2,r16
    a6ac:	00000106 	br	a6b4 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a6b0:	0005883a 	mov	r2,zero
}
    a6b4:	dfc00417 	ldw	ra,16(sp)
    a6b8:	dcc00317 	ldw	r19,12(sp)
    a6bc:	dc800217 	ldw	r18,8(sp)
    a6c0:	dc400117 	ldw	r17,4(sp)
    a6c4:	dc000017 	ldw	r16,0(sp)
    a6c8:	dec00504 	addi	sp,sp,20
    a6cc:	f800283a 	ret

0000a6d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a6d0:	f800283a 	ret

0000a6d4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a6d4:	000a7601 	jmpi	a760 <alt_iic_isr_register>

0000a6d8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6d8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6dc:	00bfff84 	movi	r2,-2
    a6e0:	2084703a 	and	r2,r4,r2
    a6e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    a6e8:	00c00044 	movi	r3,1
    a6ec:	d0a0d517 	ldw	r2,-31916(gp)
    a6f0:	194a983a 	sll	r5,r3,r5
    a6f4:	288ab03a 	or	r5,r5,r2
    a6f8:	d160d515 	stw	r5,-31916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a6fc:	d0a0d517 	ldw	r2,-31916(gp)
    a700:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a704:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    a708:	0005883a 	mov	r2,zero
    a70c:	f800283a 	ret

0000a710 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a710:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a714:	00bfff84 	movi	r2,-2
    a718:	2084703a 	and	r2,r4,r2
    a71c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    a720:	00ffff84 	movi	r3,-2
    a724:	d0a0d517 	ldw	r2,-31916(gp)
    a728:	194a183a 	rol	r5,r3,r5
    a72c:	288a703a 	and	r5,r5,r2
    a730:	d160d515 	stw	r5,-31916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a734:	d0a0d517 	ldw	r2,-31916(gp)
    a738:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a73c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    a740:	0005883a 	mov	r2,zero
    a744:	f800283a 	ret

0000a748 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a748:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a74c:	00800044 	movi	r2,1
    a750:	1144983a 	sll	r2,r2,r5
    a754:	10c4703a 	and	r2,r2,r3
}
    a758:	1004c03a 	cmpne	r2,r2,zero
    a75c:	f800283a 	ret

0000a760 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a760:	00c007c4 	movi	r3,31
    a764:	19401616 	blt	r3,r5,a7c0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a768:	defffe04 	addi	sp,sp,-8
    a76c:	dfc00115 	stw	ra,4(sp)
    a770:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a774:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a778:	00ffff84 	movi	r3,-2
    a77c:	80c6703a 	and	r3,r16,r3
    a780:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    a784:	280490fa 	slli	r2,r5,3
    a788:	00c00074 	movhi	r3,1
    a78c:	18ed4604 	addi	r3,r3,-19176
    a790:	1885883a 	add	r2,r3,r2
    a794:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    a798:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a79c:	30000626 	beq	r6,zero,a7b8 <alt_iic_isr_register+0x58>
    a7a0:	000a6d80 	call	a6d8 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7a4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    a7a8:	dfc00117 	ldw	ra,4(sp)
    a7ac:	dc000017 	ldw	r16,0(sp)
    a7b0:	dec00204 	addi	sp,sp,8
    a7b4:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a7b8:	000a7100 	call	a710 <alt_ic_irq_disable>
    a7bc:	003ff906 	br	a7a4 <_gp+0xffff75e8>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    a7c0:	00bffa84 	movi	r2,-22
    a7c4:	f800283a 	ret

0000a7c8 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    a7c8:	defffd04 	addi	sp,sp,-12
    a7cc:	2805883a 	mov	r2,r5
    a7d0:	dc400115 	stw	r17,4(sp)
    a7d4:	300b883a 	mov	r5,r6
    a7d8:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
    a7dc:	01807fc4 	movi	r6,511
    a7e0:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    a7e4:	dfc00215 	stw	ra,8(sp)
    a7e8:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
    a7ec:	000a8c80 	call	a8c8 <open>

  if (old >= 0)
    a7f0:	10001316 	blt	r2,zero,a840 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
    a7f4:	1009883a 	mov	r4,r2
    a7f8:	01400304 	movi	r5,12
    a7fc:	1021883a 	mov	r16,r2
    a800:	0008e4c0 	call	8e4c <__mulsi3>
    a804:	00c00074 	movhi	r3,1
    a808:	18ec0504 	addi	r3,r3,-20460
    a80c:	1885883a 	add	r2,r3,r2
    a810:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a814:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
    a818:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    a81c:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    a820:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a824:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    a828:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
    a82c:	dfc00217 	ldw	ra,8(sp)
    a830:	dc400117 	ldw	r17,4(sp)
    a834:	dc000017 	ldw	r16,0(sp)
    a838:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    a83c:	000aa501 	jmpi	aa50 <alt_release_fd>
  }
} 
    a840:	dfc00217 	ldw	ra,8(sp)
    a844:	dc400117 	ldw	r17,4(sp)
    a848:	dc000017 	ldw	r16,0(sp)
    a84c:	dec00304 	addi	sp,sp,12
    a850:	f800283a 	ret

0000a854 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a854:	defffb04 	addi	sp,sp,-20
    a858:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a85c:	04000074 	movhi	r16,1
    a860:	842c0804 	addi	r16,r16,-20448
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a864:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a868:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a86c:	dcc00315 	stw	r19,12(sp)
    a870:	dc800215 	stw	r18,8(sp)
    a874:	2827883a 	mov	r19,r5
    a878:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a87c:	200b883a 	mov	r5,r4
    a880:	880d883a 	mov	r6,r17
    a884:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a888:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a88c:	000a7c80 	call	a7c8 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a890:	813ffd04 	addi	r4,r16,-12
    a894:	980b883a 	mov	r5,r19
    a898:	000d883a 	mov	r6,zero
    a89c:	000a7c80 	call	a7c8 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a8a0:	880d883a 	mov	r6,r17
    a8a4:	900b883a 	mov	r5,r18
    a8a8:	81000304 	addi	r4,r16,12
}  
    a8ac:	dfc00417 	ldw	ra,16(sp)
    a8b0:	dcc00317 	ldw	r19,12(sp)
    a8b4:	dc800217 	ldw	r18,8(sp)
    a8b8:	dc400117 	ldw	r17,4(sp)
    a8bc:	dc000017 	ldw	r16,0(sp)
    a8c0:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a8c4:	000a7c81 	jmpi	a7c8 <alt_open_fd.constprop.0>

0000a8c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a8c8:	defffa04 	addi	sp,sp,-24
    a8cc:	dc000015 	stw	r16,0(sp)
    a8d0:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a8d4:	d1600504 	addi	r5,gp,-32748
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a8d8:	dc800215 	stw	r18,8(sp)
    a8dc:	dc400115 	stw	r17,4(sp)
    a8e0:	dfc00515 	stw	ra,20(sp)
    a8e4:	dd000415 	stw	r20,16(sp)
    a8e8:	dcc00315 	stw	r19,12(sp)
    a8ec:	2023883a 	mov	r17,r4
    a8f0:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a8f4:	000a6580 	call	a658 <alt_find_dev>
    a8f8:	10004a26 	beq	r2,zero,aa24 <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    a8fc:	1009883a 	mov	r4,r2
    a900:	1029883a 	mov	r20,r2
    a904:	000ab600 	call	ab60 <alt_get_fd>
    a908:	1027883a 	mov	r19,r2
    a90c:	1000090e 	bge	r2,zero,a934 <open+0x6c>
    a910:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    a914:	9809883a 	mov	r4,r19
    a918:	000aa500 	call	aa50 <alt_release_fd>
    a91c:	d0a00917 	ldw	r2,-32732(gp)
    a920:	10004726 	beq	r2,zero,aa40 <open+0x178>
    a924:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    a928:	14000015 	stw	r16,0(r2)
    return -1;
    a92c:	00bfffc4 	movi	r2,-1
    a930:	00003206 	br	a9fc <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    a934:	01400304 	movi	r5,12
    a938:	9809883a 	mov	r4,r19
    a93c:	0008e4c0 	call	8e4c <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a940:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    a944:	00c00074 	movhi	r3,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a948:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    a94c:	18ec0504 	addi	r3,r3,-20460

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a950:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    a954:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a958:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a95c:	d2600417 	ldw	r9,-32752(gp)
    a960:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a964:	21400215 	stw	r5,8(r4)
    a968:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a96c:	000b883a 	mov	r5,zero
    a970:	00000306 	br	a980 <open+0xb8>
    a974:	18c00304 	addi	r3,r3,12
    a978:	31800304 	addi	r6,r6,12
    a97c:	49401636 	bltu	r9,r5,a9d8 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a980:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a984:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a988:	3a3ffa1e 	bne	r7,r8,a974 <_gp+0xffff77b8>
    a98c:	30800017 	ldw	r2,0(r6)
    a990:	103ff80e 	bge	r2,zero,a974 <_gp+0xffff77b8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a994:	20fff726 	beq	r4,r3,a974 <_gp+0xffff77b8>
    a998:	04000344 	movi	r16,13
    a99c:	003fdd06 	br	a914 <_gp+0xffff7758>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    a9a0:	1009883a 	mov	r4,r2
    a9a4:	000ab600 	call	ab60 <alt_get_fd>
    a9a8:	1027883a 	mov	r19,r2
    a9ac:	103fd816 	blt	r2,zero,a910 <_gp+0xffff7754>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    a9b0:	9809883a 	mov	r4,r19
    a9b4:	01400304 	movi	r5,12
    a9b8:	0008e4c0 	call	8e4c <__mulsi3>
    a9bc:	01000074 	movhi	r4,1
    a9c0:	212c0504 	addi	r4,r4,-20460
    a9c4:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a9c8:	00900034 	movhi	r2,16384
    a9cc:	10bfffc4 	addi	r2,r2,-1
    a9d0:	8084703a 	and	r2,r16,r2
    a9d4:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a9d8:	a0800317 	ldw	r2,12(r20)
    a9dc:	10000f26 	beq	r2,zero,aa1c <open+0x154>
    a9e0:	900f883a 	mov	r7,r18
    a9e4:	800d883a 	mov	r6,r16
    a9e8:	880b883a 	mov	r5,r17
    a9ec:	103ee83a 	callr	r2
    a9f0:	1007883a 	mov	r3,r2
    a9f4:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a9f8:	18001316 	blt	r3,zero,aa48 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
    a9fc:	dfc00517 	ldw	ra,20(sp)
    aa00:	dd000417 	ldw	r20,16(sp)
    aa04:	dcc00317 	ldw	r19,12(sp)
    aa08:	dc800217 	ldw	r18,8(sp)
    aa0c:	dc400117 	ldw	r17,4(sp)
    aa10:	dc000017 	ldw	r16,0(sp)
    aa14:	dec00604 	addi	sp,sp,24
    aa18:	f800283a 	ret
    aa1c:	9805883a 	mov	r2,r19
    aa20:	003ff606 	br	a9fc <_gp+0xffff7840>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    aa24:	8809883a 	mov	r4,r17
    aa28:	000aab40 	call	aab4 <alt_find_file>
    aa2c:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    aa30:	103fdb1e 	bne	r2,zero,a9a0 <_gp+0xffff77e4>
    aa34:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    aa38:	04ffffc4 	movi	r19,-1
    aa3c:	003fb506 	br	a914 <_gp+0xffff7758>
    aa40:	d0a0d104 	addi	r2,gp,-31932
    aa44:	003fb806 	br	a928 <_gp+0xffff776c>
    aa48:	00e1c83a 	sub	r16,zero,r3
    aa4c:	003fb106 	br	a914 <_gp+0xffff7758>

0000aa50 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    aa50:	00c00084 	movi	r3,2
    aa54:	1900140e 	bge	r3,r4,aaa8 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    aa58:	defffd04 	addi	sp,sp,-12
    aa5c:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    aa60:	01400304 	movi	r5,12
    aa64:	04400074 	movhi	r17,1
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    aa68:	dfc00215 	stw	ra,8(sp)
    aa6c:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    aa70:	8c6c0504 	addi	r17,r17,-20460
    aa74:	2021883a 	mov	r16,r4
    aa78:	0008e4c0 	call	8e4c <__mulsi3>
    aa7c:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
    aa80:	01400304 	movi	r5,12
    aa84:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    aa88:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    aa8c:	0008e4c0 	call	8e4c <__mulsi3>
    aa90:	8885883a 	add	r2,r17,r2
    aa94:	10000015 	stw	zero,0(r2)
  }
}
    aa98:	dfc00217 	ldw	ra,8(sp)
    aa9c:	dc400117 	ldw	r17,4(sp)
    aaa0:	dc000017 	ldw	r16,0(sp)
    aaa4:	dec00304 	addi	sp,sp,12
    aaa8:	f800283a 	ret

0000aaac <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    aaac:	000170fa 	wrctl	ienable,zero
    aab0:	f800283a 	ret

0000aab4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aab4:	defffa04 	addi	sp,sp,-24
    aab8:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aabc:	d4200717 	ldw	r16,-32740(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aac0:	dd000415 	stw	r20,16(sp)
    aac4:	dfc00515 	stw	ra,20(sp)
    aac8:	dcc00315 	stw	r19,12(sp)
    aacc:	dc800215 	stw	r18,8(sp)
    aad0:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aad4:	d5200704 	addi	r20,gp,-32740
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aad8:	85001626 	beq	r16,r20,ab34 <alt_find_file+0x80>
    aadc:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    aae0:	04c00bc4 	movi	r19,47
    aae4:	00000806 	br	ab08 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aae8:	9185883a 	add	r2,r18,r6
    aaec:	10800007 	ldb	r2,0(r2)
    aaf0:	14c00126 	beq	r2,r19,aaf8 <alt_find_file+0x44>
    aaf4:	1000021e 	bne	r2,zero,ab00 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    aaf8:	000ac7c0 	call	ac7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aafc:	10001626 	beq	r2,zero,ab58 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    ab00:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ab04:	85000b26 	beq	r16,r20,ab34 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    ab08:	84400217 	ldw	r17,8(r16)
    ab0c:	8809883a 	mov	r4,r17
    ab10:	00085b80 	call	85b8 <strlen>
    ab14:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    ab18:	8885883a 	add	r2,r17,r2
    ab1c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    ab20:	900b883a 	mov	r5,r18
    ab24:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    ab28:	14ffef1e 	bne	r2,r19,aae8 <_gp+0xffff792c>
    {
      len -= 1;
    ab2c:	31bfffc4 	addi	r6,r6,-1
    ab30:	003fed06 	br	aae8 <_gp+0xffff792c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ab34:	0005883a 	mov	r2,zero
}
    ab38:	dfc00517 	ldw	ra,20(sp)
    ab3c:	dd000417 	ldw	r20,16(sp)
    ab40:	dcc00317 	ldw	r19,12(sp)
    ab44:	dc800217 	ldw	r18,8(sp)
    ab48:	dc400117 	ldw	r17,4(sp)
    ab4c:	dc000017 	ldw	r16,0(sp)
    ab50:	dec00604 	addi	sp,sp,24
    ab54:	f800283a 	ret
    ab58:	8005883a 	mov	r2,r16
    ab5c:	003ff606 	br	ab38 <_gp+0xffff797c>

0000ab60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ab60:	defffc04 	addi	sp,sp,-16
    ab64:	dc400115 	stw	r17,4(sp)
    ab68:	04400074 	movhi	r17,1
    ab6c:	8c6c0504 	addi	r17,r17,-20460
    ab70:	dc000015 	stw	r16,0(sp)
    ab74:	dfc00315 	stw	ra,12(sp)
    ab78:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ab7c:	0021883a 	mov	r16,zero
    ab80:	8805883a 	mov	r2,r17
    ab84:	01400804 	movi	r5,32
    ab88:	00000206 	br	ab94 <alt_get_fd+0x34>
    ab8c:	84000044 	addi	r16,r16,1
    ab90:	81401326 	beq	r16,r5,abe0 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
    ab94:	10c00017 	ldw	r3,0(r2)
    ab98:	10800304 	addi	r2,r2,12
    ab9c:	183ffb1e 	bne	r3,zero,ab8c <_gp+0xffff79d0>
    aba0:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
    aba4:	01400304 	movi	r5,12
    aba8:	8009883a 	mov	r4,r16
    abac:	0008e4c0 	call	8e4c <__mulsi3>
    abb0:	8885883a 	add	r2,r17,r2
    abb4:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    abb8:	d0a00417 	ldw	r2,-32752(gp)
    abbc:	1400010e 	bge	r2,r16,abc4 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    abc0:	d4200415 	stw	r16,-32752(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    abc4:	8005883a 	mov	r2,r16
    abc8:	dfc00317 	ldw	ra,12(sp)
    abcc:	dc800217 	ldw	r18,8(sp)
    abd0:	dc400117 	ldw	r17,4(sp)
    abd4:	dc000017 	ldw	r16,0(sp)
    abd8:	dec00404 	addi	sp,sp,16
    abdc:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    abe0:	043ffa04 	movi	r16,-24
    abe4:	003ff706 	br	abc4 <_gp+0xffff7a08>

0000abe8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    abe8:	213ffe84 	addi	r4,r4,-6
    abec:	008003c4 	movi	r2,15
    abf0:	11001636 	bltu	r2,r4,ac4c <alt_exception_cause_generated_bad_addr+0x64>
    abf4:	200890ba 	slli	r4,r4,2
    abf8:	00800074 	movhi	r2,1
    abfc:	10ab0304 	addi	r2,r2,-21492
    ac00:	2089883a 	add	r4,r4,r2
    ac04:	20800017 	ldw	r2,0(r4)
    ac08:	1000683a 	jmp	r2
    ac0c:	0000ac54 	movui	zero,689
    ac10:	0000ac54 	movui	zero,689
    ac14:	0000ac4c 	andi	zero,zero,689
    ac18:	0000ac4c 	andi	zero,zero,689
    ac1c:	0000ac4c 	andi	zero,zero,689
    ac20:	0000ac54 	movui	zero,689
    ac24:	0000ac4c 	andi	zero,zero,689
    ac28:	0000ac4c 	andi	zero,zero,689
    ac2c:	0000ac54 	movui	zero,689
    ac30:	0000ac54 	movui	zero,689
    ac34:	0000ac4c 	andi	zero,zero,689
    ac38:	0000ac54 	movui	zero,689
    ac3c:	0000ac4c 	andi	zero,zero,689
    ac40:	0000ac4c 	andi	zero,zero,689
    ac44:	0000ac4c 	andi	zero,zero,689
    ac48:	0000ac54 	movui	zero,689
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    ac4c:	0005883a 	mov	r2,zero
    ac50:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    ac54:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    ac58:	f800283a 	ret

0000ac5c <exit>:
    ac5c:	defffe04 	addi	sp,sp,-8
    ac60:	000b883a 	mov	r5,zero
    ac64:	dc000015 	stw	r16,0(sp)
    ac68:	dfc00115 	stw	ra,4(sp)
    ac6c:	2021883a 	mov	r16,r4
    ac70:	000acac0 	call	acac <__call_exitprocs>
    ac74:	8009883a 	mov	r4,r16
    ac78:	000ae3c0 	call	ae3c <_exit>

0000ac7c <memcmp>:
    ac7c:	218d883a 	add	r6,r4,r6
    ac80:	21800826 	beq	r4,r6,aca4 <memcmp+0x28>
    ac84:	20800003 	ldbu	r2,0(r4)
    ac88:	28c00003 	ldbu	r3,0(r5)
    ac8c:	10c00226 	beq	r2,r3,ac98 <memcmp+0x1c>
    ac90:	10c5c83a 	sub	r2,r2,r3
    ac94:	f800283a 	ret
    ac98:	21000044 	addi	r4,r4,1
    ac9c:	29400044 	addi	r5,r5,1
    aca0:	003ff706 	br	ac80 <_gp+0xffff7ac4>
    aca4:	0005883a 	mov	r2,zero
    aca8:	f800283a 	ret

0000acac <__call_exitprocs>:
    acac:	defff504 	addi	sp,sp,-44
    acb0:	dd000515 	stw	r20,20(sp)
    acb4:	05000074 	movhi	r20,1
    acb8:	dc800315 	stw	r18,12(sp)
    acbc:	dfc00a15 	stw	ra,40(sp)
    acc0:	df000915 	stw	fp,36(sp)
    acc4:	ddc00815 	stw	r23,32(sp)
    acc8:	dd800715 	stw	r22,28(sp)
    accc:	dd400615 	stw	r21,24(sp)
    acd0:	dcc00415 	stw	r19,16(sp)
    acd4:	dc400215 	stw	r17,8(sp)
    acd8:	dc000115 	stw	r16,4(sp)
    acdc:	d9000015 	stw	r4,0(sp)
    ace0:	2825883a 	mov	r18,r5
    ace4:	a52c6f04 	addi	r20,r20,-20036
    ace8:	a4400017 	ldw	r17,0(r20)
    acec:	8cc00c17 	ldw	r19,48(r17)
    acf0:	8c400c04 	addi	r17,r17,48
    acf4:	98004526 	beq	r19,zero,ae0c <__call_exitprocs+0x160>
    acf8:	9c000117 	ldw	r16,4(r19)
    acfc:	00900034 	movhi	r2,16384
    ad00:	10bfffc4 	addi	r2,r2,-1
    ad04:	9d402217 	ldw	r21,136(r19)
    ad08:	85bfffc4 	addi	r22,r16,-1
    ad0c:	80a1883a 	add	r16,r16,r2
    ad10:	8421883a 	add	r16,r16,r16
    ad14:	8421883a 	add	r16,r16,r16
    ad18:	ac2f883a 	add	r23,r21,r16
    ad1c:	84000204 	addi	r16,r16,8
    ad20:	9c21883a 	add	r16,r19,r16
    ad24:	b0002716 	blt	r22,zero,adc4 <__call_exitprocs+0x118>
    ad28:	90000726 	beq	r18,zero,ad48 <__call_exitprocs+0x9c>
    ad2c:	a800041e 	bne	r21,zero,ad40 <__call_exitprocs+0x94>
    ad30:	b5bfffc4 	addi	r22,r22,-1
    ad34:	bdffff04 	addi	r23,r23,-4
    ad38:	843fff04 	addi	r16,r16,-4
    ad3c:	003ff906 	br	ad24 <_gp+0xffff7b68>
    ad40:	b9002017 	ldw	r4,128(r23)
    ad44:	913ffa1e 	bne	r18,r4,ad30 <_gp+0xffff7b74>
    ad48:	99000117 	ldw	r4,4(r19)
    ad4c:	82000017 	ldw	r8,0(r16)
    ad50:	213fffc4 	addi	r4,r4,-1
    ad54:	b100021e 	bne	r22,r4,ad60 <__call_exitprocs+0xb4>
    ad58:	9d800115 	stw	r22,4(r19)
    ad5c:	00000106 	br	ad64 <__call_exitprocs+0xb8>
    ad60:	80000015 	stw	zero,0(r16)
    ad64:	403ff226 	beq	r8,zero,ad30 <_gp+0xffff7b74>
    ad68:	9f000117 	ldw	fp,4(r19)
    ad6c:	a8000526 	beq	r21,zero,ad84 <__call_exitprocs+0xd8>
    ad70:	00800044 	movi	r2,1
    ad74:	1592983a 	sll	r9,r2,r22
    ad78:	a9404017 	ldw	r5,256(r21)
    ad7c:	494a703a 	and	r5,r9,r5
    ad80:	2800021e 	bne	r5,zero,ad8c <__call_exitprocs+0xe0>
    ad84:	403ee83a 	callr	r8
    ad88:	00000906 	br	adb0 <__call_exitprocs+0x104>
    ad8c:	a9004117 	ldw	r4,260(r21)
    ad90:	4908703a 	and	r4,r9,r4
    ad94:	2000041e 	bne	r4,zero,ada8 <__call_exitprocs+0xfc>
    ad98:	b9400017 	ldw	r5,0(r23)
    ad9c:	d9000017 	ldw	r4,0(sp)
    ada0:	403ee83a 	callr	r8
    ada4:	00000206 	br	adb0 <__call_exitprocs+0x104>
    ada8:	b9000017 	ldw	r4,0(r23)
    adac:	403ee83a 	callr	r8
    adb0:	99000117 	ldw	r4,4(r19)
    adb4:	e13fcc1e 	bne	fp,r4,ace8 <_gp+0xffff7b2c>
    adb8:	89000017 	ldw	r4,0(r17)
    adbc:	993fdc26 	beq	r19,r4,ad30 <_gp+0xffff7b74>
    adc0:	003fc906 	br	ace8 <_gp+0xffff7b2c>
    adc4:	00800034 	movhi	r2,0
    adc8:	10800004 	addi	r2,r2,0
    adcc:	10000f26 	beq	r2,zero,ae0c <__call_exitprocs+0x160>
    add0:	99400117 	ldw	r5,4(r19)
    add4:	99000017 	ldw	r4,0(r19)
    add8:	2800091e 	bne	r5,zero,ae00 <__call_exitprocs+0x154>
    addc:	20000826 	beq	r4,zero,ae00 <__call_exitprocs+0x154>
    ade0:	89000015 	stw	r4,0(r17)
    ade4:	a8000226 	beq	r21,zero,adf0 <__call_exitprocs+0x144>
    ade8:	a809883a 	mov	r4,r21
    adec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    adf0:	9809883a 	mov	r4,r19
    adf4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    adf8:	8cc00017 	ldw	r19,0(r17)
    adfc:	003fbd06 	br	acf4 <_gp+0xffff7b38>
    ae00:	9823883a 	mov	r17,r19
    ae04:	2027883a 	mov	r19,r4
    ae08:	003fba06 	br	acf4 <_gp+0xffff7b38>
    ae0c:	dfc00a17 	ldw	ra,40(sp)
    ae10:	df000917 	ldw	fp,36(sp)
    ae14:	ddc00817 	ldw	r23,32(sp)
    ae18:	dd800717 	ldw	r22,28(sp)
    ae1c:	dd400617 	ldw	r21,24(sp)
    ae20:	dd000517 	ldw	r20,20(sp)
    ae24:	dcc00417 	ldw	r19,16(sp)
    ae28:	dc800317 	ldw	r18,12(sp)
    ae2c:	dc400217 	ldw	r17,8(sp)
    ae30:	dc000117 	ldw	r16,4(sp)
    ae34:	dec00b04 	addi	sp,sp,44
    ae38:	f800283a 	ret

0000ae3c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ae3c:	20000226 	beq	r4,zero,ae48 <_exit+0xc>
    ALT_SIM_FAIL();
    ae40:	002af070 	cmpltui	zero,zero,43969
    ae44:	003fff06 	br	ae44 <_gp+0xffff7c88>
  } else {
    ALT_SIM_PASS();
    ae48:	002af0b0 	cmpltui	zero,zero,43970
    ae4c:	003ffd06 	br	ae44 <_gp+0xffff7c88>
