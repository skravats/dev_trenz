/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"

int main()
{

	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	alt_u8 txbuffer[0x200];
	alt_u8 rxbuffer[0x200];
	int i;
	ALT_AVALON_I2C_STATUS_CODE status;

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
	if (NULL==i2c_dev)
	{
		printf("Error: Cannot find /dev/i2c_0\n");
		return 1;
	}

	//set the address of the device using

	alt_avalon_i2c_master_target_set(i2c_dev,0x39)

	//write data to an adv7511 at address 0x015

	txbuffer[0]=0; txbuffer[1]=15;

	//The eeprom address which will be sent as first two bytes of data

	for (i=0;i<0x1;i++) txbuffer[i+2]=0x05; //some data to write
	status=alt_avalon_i2c_master_tx(i2c_dev,txbuffer, 0x10+2, ALT_AVALON_I2C_NO_INTERRUPTS);
	if (status!=ALT_AVALON_I2C_SUCCESS) return 1; //FAIL

	//read back the data into rxbuffer
	//This command sends the 2 byte eeprom data address required by the eeprom
	//Then does a restart and receives the data.
	status=alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 2, rxbuffer, 0x10, ALT_AVALON_I2C_NO_INTERRUPTS);
	if (status!=ALT_AVALON_I2C_SUCCESS) return 1; //FAIL
	return 0;
}

